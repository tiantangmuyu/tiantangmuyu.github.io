<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>pandas常用数据分析函数</title>
    <link href="/2021/04/01/pandas%E5%B8%B8%E7%94%A8%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E5%87%BD%E6%95%B0/"/>
    <url>/2021/04/01/pandas%E5%B8%B8%E7%94%A8%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E5%87%BD%E6%95%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="pandas常用数据分析函数"><a class="markdownIt-Anchor" href="#pandas常用数据分析函数"></a> pandas常用数据分析函数</h1><a id="more"></a><h2 id="常用资料"><a class="markdownIt-Anchor" href="#常用资料"></a> 常用资料</h2><p><a href="https://pandas.pydata.org/pandas-docs/stable/user_guide/10min.html">10分钟pandas</a></p><p><a href="https://stackoverflow.com/questions/tagged/pandas">Stack Overflow Pandas问题汇集</a></p><p><a href="https://www.shanelynn.ie/summarising-aggregation-and-grouping-data-in-python-pandas/">groupby.agg用法</a></p><p><a href="https://blog.csdn.net/lzw2016/article/details/80471771">pandas处理分块大文件</a></p><p><a href="https://pandas.pydata.org/pandas-docs/stable/getting_started/comparison/comparison_with_sql.html">pandas与sql语句对比</a></p><h2 id="导入数据"><a class="markdownIt-Anchor" href="#导入数据"></a> 导入数据</h2><ul><li>pd.read_csv(filename)：从CSV文件导入数据</li><li>pd.read_table(filename)：从限定分隔符的文本文件导入数据</li><li>pd.read_excel(filename)：从Excel文件导入数据</li><li>pd.read_sql(query, connection_object)：从SQL表/库导入数据</li><li>pd.read_json(json_string)：从JSON格式的字符串导入数据</li><li>pd.read_html(url)：解析URL、字符串或者HTML文件，抽取其中的tables表格</li><li>pd.read_clipboard()：从你的粘贴板获取内容，并传给read_table()</li><li>pd.DataFrame(dict)：从字典对象导入数据，Key是列名，Value是数据</li></ul><h2 id="导出数据"><a class="markdownIt-Anchor" href="#导出数据"></a> 导出数据</h2><ul><li>df.to_csv(filename)：导出数据到CSV文件</li><li>df.to_excel(filename)：导出数据到Excel文件</li><li>df.to_sql(table_name, connection_object)：导出数据到SQL表</li><li>df.to_json(filename)：以Json格式导出数据到文本文件</li></ul><h2 id="创建测试对象"><a class="markdownIt-Anchor" href="#创建测试对象"></a> 创建测试对象</h2><ul><li>pd.DataFrame(np.random.rand(20,5))：创建20行5列的随机数组成的DataFrame对象</li><li>pd.Series(my_list)：从可迭代对象my_list创建一个Series对象</li><li>df.index = pd.date_range(‘1900/1/30’, periods=df.shape[0])：增加一个日期索引</li></ul><h2 id="查看-检查数据"><a class="markdownIt-Anchor" href="#查看-检查数据"></a> 查看、检查数据</h2><ul><li>df.head(n)：查看DataFrame对象的前n行</li><li>df.tail(n)：查看DataFrame对象的最后n行</li><li>df.shape()：查看行数和列数</li><li><a href="https://link.zhihu.com/?target=http%3A//df.info()">http:// df.info() </a>：查看索引、数据类型和内存信息</li><li>df.describe()：查看数值型列的汇总统计</li><li>s.value_counts(dropna=False)：查看Series对象的唯一值和计数</li><li>df.apply(pd.Series.value_counts)：查看DataFrame对象中每一列的唯一值和计数</li></ul><h2 id="数据选取"><a class="markdownIt-Anchor" href="#数据选取"></a> 数据选取</h2><ul><li>df[col]：根据列名，并以Series的形式返回列</li><li>df[[col1, col2]]：以DataFrame形式返回多列</li><li>s.iloc[0]：按位置选取数据</li><li>s.loc[‘index_one’]：按索引选取数据</li><li>df.iloc[0,:]：返回第一行</li><li>df.iloc[0,0]：返回第一列的第一个元素</li></ul><h2 id="数据清理"><a class="markdownIt-Anchor" href="#数据清理"></a> 数据清理</h2><ul><li>df.columns = [‘a’,‘b’,‘c’]：重命名列名</li><li>pd.isnull()：检查DataFrame对象中的空值，并返回一个Boolean数组</li><li>pd.notnull()：检查DataFrame对象中的非空值，并返回一个Boolean数组</li><li>df.dropna()：删除所有包含空值的行</li><li>df.dropna(axis=1)：删除所有包含空值的列</li><li>df.dropna(axis=1,thresh=n)：删除所有小于n个非空值的行</li><li>df.fillna(x)：用x替换DataFrame对象中所有的空值</li><li>df.drop_duplicates(subset=None, keep=‘first’, inplace=False)  :去除重复项,subset用来指定特定的列，默认所有列,keep 删除重复项并保留第一次出现的项,inplace是直接在原来数据上修改还是保留一个副本</li><li>s.astype(float)：将Series中的数据类型更改为float类型</li><li>s.replace(1,‘one’)：用‘one’代替所有等于1的值</li><li>s.replace([1,3],[‘one’,‘three’])：用’one’代替1，用’three’代替3</li><li>df.rename(columns=lambda x: x + 1)：批量更改列名</li><li>df.rename(columns={‘old_name’: ‘new_ name’})：选择性更改列名</li><li>df.set_index(‘column_one’)：更改索引列</li><li>df.rename(index=lambda x: x + 1)：批量重命名索引</li></ul><h2 id="数据处理filter-sort和groupby"><a class="markdownIt-Anchor" href="#数据处理filter-sort和groupby"></a> 数据处理：Filter、Sort和GroupBy</h2><ul><li>df[df[col] &gt; 0.5]：选择col列的值大于0.5的行</li><li>df.sort_values(col1)：按照列col1排序数据，默认升序排列</li><li>df.sort_values(col2, ascending=False)：按照列col1降序排列数据</li><li>df.sort_values([col1,col2], ascending=[True,False])：先按列col1升序排列，后按col2降序排列数据</li><li>df.groupby(col)：返回一个按列col进行分组的Groupby对象</li><li>df.groupby([col1,col2])：返回一个按多列进行分组的Groupby对象</li><li>df.groupby(col1)[col2]：返回按列col1进行分组后，列col2的均值</li><li>df.pivot_table(index=col1, values=[col2,col3], aggfunc=max)：创建一个按列col1进行分组，并计算col2和col3的最大值的数据透视表</li><li>df.groupby(col1).agg(np.mean)：返回按列col1分组的所有列的均值</li><li>data.apply(np.mean)：对DataFrame中的每一列应用函数np.mean</li><li>data.apply(np.max,axis=1)：对DataFrame中的每一行应用函数np.max</li></ul><h2 id="数据合并"><a class="markdownIt-Anchor" href="#数据合并"></a> 数据合并</h2><ul><li>df1.append(df2)：将df2中的行添加到df1的尾部</li><li>df.concat([df1, df2],axis=1)：将df2中的列添加到df1的尾部</li><li>df1.join(df2,on=col1,how=‘inner’)：对df1的列和df2的列执行SQL形式的join</li></ul><h2 id="数据统计"><a class="markdownIt-Anchor" href="#数据统计"></a> 数据统计</h2><ul><li>df.describe()：查看数据值列的汇总统计</li><li>df.mean()：返回所有列的均值</li><li>df.corr()：返回列与列之间的相关系数</li><li>df.count()：返回每一列中的非空值的个数</li><li>df.max()：返回每一列的最大值</li><li>df.min()：返回每一列的最小值</li><li>df.median()：返回每一列的中位数</li><li>df.std()：返回每一列的标准差</li></ul>]]></content>
    
    
    <categories>
      
      <category>python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>pandas</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>python语音天气预报</title>
    <link href="/2021/03/26/python%E8%AF%AD%E9%9F%B3%E5%A4%A9%E6%B0%94%E9%A2%84%E6%8A%A5/"/>
    <url>/2021/03/26/python%E8%AF%AD%E9%9F%B3%E5%A4%A9%E6%B0%94%E9%A2%84%E6%8A%A5/</url>
    
    <content type="html"><![CDATA[<p>python语音天气预报</p><a id="more"></a><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">Spyder Editor</span><br><span class="hljs-string"></span><br><span class="hljs-string">This is a temporary script file.</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><br><span class="hljs-comment"># coding:utf-8</span><br><br><span class="hljs-keyword">import</span> pyttsx3<br><br><br><br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> re<br><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">from</span> datetime <span class="hljs-keyword">import</span> datetime, timedelta<br><span class="hljs-keyword">from</span> bs4 <span class="hljs-keyword">import</span> BeautifulSoup<br><br><br>headers = &#123;<br>        <span class="hljs-string">&#x27;User-Agent&#x27;</span>: <span class="hljs-string">&#x27;Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit&#x27;</span><br>                      <span class="hljs-string">&#x27;/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safar&#x27;</span><br>                      <span class="hljs-string">&#x27;i/537.36&#x27;</span>,<br>    &#125;<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">numtozh</span>(<span class="hljs-params">num</span>):</span><br>    num_dict = &#123;<span class="hljs-number">1</span>: <span class="hljs-string">&#x27;一&#x27;</span>, <span class="hljs-number">2</span>: <span class="hljs-string">&#x27;二&#x27;</span>, <span class="hljs-number">3</span>: <span class="hljs-string">&#x27;三&#x27;</span>, <span class="hljs-number">4</span>: <span class="hljs-string">&#x27;四&#x27;</span>, <span class="hljs-number">5</span>: <span class="hljs-string">&#x27;五&#x27;</span>, <span class="hljs-number">6</span>: <span class="hljs-string">&#x27;六&#x27;</span>, <span class="hljs-number">7</span>: <span class="hljs-string">&#x27;七&#x27;</span>,<br>                <span class="hljs-number">8</span>: <span class="hljs-string">&#x27;八&#x27;</span>, <span class="hljs-number">9</span>: <span class="hljs-string">&#x27;九&#x27;</span>, <span class="hljs-number">0</span>: <span class="hljs-string">&#x27;零&#x27;</span>&#125;<br>    num = <span class="hljs-built_in">int</span>(num)<br>    <span class="hljs-keyword">if</span> <span class="hljs-number">100</span> &lt;= num &lt; <span class="hljs-number">1000</span>:<br>        b_num = num // <span class="hljs-number">100</span><br>        s_num = (num-b_num*<span class="hljs-number">100</span>) // <span class="hljs-number">10</span><br>        g_num = (num-b_num*<span class="hljs-number">100</span>) % <span class="hljs-number">10</span><br>        <span class="hljs-keyword">if</span> g_num == <span class="hljs-number">0</span> <span class="hljs-keyword">and</span> s_num == <span class="hljs-number">0</span>:<br>            num = <span class="hljs-string">&#x27;%s百&#x27;</span> % (num_dict[b_num])<br>        <span class="hljs-keyword">elif</span> s_num == <span class="hljs-number">0</span>:<br>            num = <span class="hljs-string">&#x27;%s百%s%s&#x27;</span> % (num_dict[b_num], num_dict.get(s_num, <span class="hljs-string">&#x27;&#x27;</span>), num_dict.get(g_num, <span class="hljs-string">&#x27;&#x27;</span>))<br>        <span class="hljs-keyword">elif</span> g_num == <span class="hljs-number">0</span>:<br>            num = <span class="hljs-string">&#x27;%s百%s十&#x27;</span> % (num_dict[b_num], num_dict.get(s_num, <span class="hljs-string">&#x27;&#x27;</span>))<br>        <span class="hljs-keyword">else</span>:<br>            num = <span class="hljs-string">&#x27;%s百%s十%s&#x27;</span> % (num_dict[b_num], num_dict.get(s_num, <span class="hljs-string">&#x27;&#x27;</span>), num_dict.get(g_num, <span class="hljs-string">&#x27;&#x27;</span>))<br>    <span class="hljs-keyword">elif</span> <span class="hljs-number">10</span> &lt;= num &lt; <span class="hljs-number">100</span>:<br>        s_num = num // <span class="hljs-number">10</span><br>        g_num = (num-s_num*<span class="hljs-number">10</span>) % <span class="hljs-number">10</span><br>        <span class="hljs-keyword">if</span> g_num == <span class="hljs-number">0</span>:<br>            g_num = <span class="hljs-string">&#x27;&#x27;</span><br>        num = <span class="hljs-string">&#x27;%s十%s&#x27;</span> % (num_dict[s_num], num_dict.get(g_num, <span class="hljs-string">&#x27;&#x27;</span>))<br>    <span class="hljs-keyword">elif</span> <span class="hljs-number">0</span> &lt;= num &lt; <span class="hljs-number">10</span>:<br>        g_num = num<br>        num = <span class="hljs-string">&#x27;%s&#x27;</span> % (num_dict[g_num])<br>    <span class="hljs-keyword">elif</span> -<span class="hljs-number">10</span> &lt; num &lt; <span class="hljs-number">0</span>:<br>        g_num = -num<br>        num = <span class="hljs-string">&#x27;零下%s&#x27;</span> % (num_dict[g_num])<br>    <span class="hljs-keyword">elif</span> -<span class="hljs-number">100</span> &lt; num &lt;= -<span class="hljs-number">10</span>:<br>        num = -num<br>        s_num = num // <span class="hljs-number">10</span><br>        g_num = (num-s_num*<span class="hljs-number">10</span>) % <span class="hljs-number">10</span><br>        <span class="hljs-keyword">if</span> g_num == <span class="hljs-number">0</span>:<br>            g_num = <span class="hljs-string">&#x27;&#x27;</span><br>        num = <span class="hljs-string">&#x27;零下%s十%s&#x27;</span> % (num_dict[s_num], num_dict.get(g_num, <span class="hljs-string">&#x27;&#x27;</span>))<br>    <span class="hljs-keyword">return</span> num<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">AMorPM</span>(<span class="hljs-params">num</span>):</span><br>    <span class="hljs-keyword">try</span>:<br>        num = <span class="hljs-built_in">int</span>(num)<br>    <span class="hljs-keyword">except</span>:<br>        <span class="hljs-built_in">print</span> (<span class="hljs-string">&#x27;整数转换出错&#x27;</span>)<br>    hour_word = <span class="hljs-string">&quot;转换出错了&quot;</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-number">6</span> &lt;=num&lt;<span class="hljs-number">11</span>  : <br>        hour_word = <span class="hljs-string">&quot;早上好&quot;</span><br>    <span class="hljs-keyword">elif</span> <span class="hljs-number">11</span> &lt;=num&lt;<span class="hljs-number">13</span>  : <br>        hour_word = <span class="hljs-string">&quot;中午好&quot;</span><br>    <span class="hljs-keyword">elif</span> <span class="hljs-number">3</span> &lt;=num&lt;<span class="hljs-number">18</span>  : <br>        hour_word = <span class="hljs-string">&quot;下午好&quot;</span><br>    <span class="hljs-keyword">elif</span> <span class="hljs-number">18</span>&lt;=num&lt;<span class="hljs-number">24</span>  : <br>        hour_word = <span class="hljs-string">&quot;晚上好&quot;</span><br>    <span class="hljs-keyword">elif</span> <span class="hljs-number">24</span>&lt;=num&lt;<span class="hljs-number">6</span>  : <br>        hour_word = <span class="hljs-string">&quot;凌晨好&quot;</span><br>    <span class="hljs-keyword">else</span>:<br>        hour_word = <span class="hljs-string">&#x27;出错了&#x27;</span><br>    <br>    <span class="hljs-keyword">return</span> hour_word<br>    <br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_weather</span>():</span><br>    <span class="hljs-comment"># 下载墨迹天气主页源码</span><br>    res = requests.get(<span class="hljs-string">&#x27;http://tianqi.moji.com/&#x27;</span>, headers=headers)<br>    <span class="hljs-comment"># 用BeautifulSoup获取所需信息</span><br>    soup = BeautifulSoup(res.text, <span class="hljs-string">&quot;html.parser&quot;</span>)<br>    temp = soup.find(<span class="hljs-string">&#x27;div&#x27;</span>, attrs=&#123;<span class="hljs-string">&#x27;class&#x27;</span>: <span class="hljs-string">&#x27;wea_weather clearfix&#x27;</span>&#125;).em.getText()<br>    temp = numtozh(<span class="hljs-built_in">int</span>(temp))<br>    weather = soup.find(<span class="hljs-string">&#x27;div&#x27;</span>, attrs=&#123;<span class="hljs-string">&#x27;class&#x27;</span>: <span class="hljs-string">&#x27;wea_weather clearfix&#x27;</span>&#125;).b.getText()<br>    sd = soup.find(<span class="hljs-string">&#x27;div&#x27;</span>, attrs=&#123;<span class="hljs-string">&#x27;class&#x27;</span>: <span class="hljs-string">&#x27;wea_about clearfix&#x27;</span>&#125;).span.getText()<br>    sd_num = re.search(<span class="hljs-string">r&#x27;\d+&#x27;</span>, sd).group()<br>    sd_num_zh = numtozh(<span class="hljs-built_in">int</span>(sd_num))<br>    sd = sd.replace(sd_num, sd_num_zh)<br>    wind = soup.find(<span class="hljs-string">&#x27;div&#x27;</span>, attrs=&#123;<span class="hljs-string">&#x27;class&#x27;</span>: <span class="hljs-string">&#x27;wea_about clearfix&#x27;</span>&#125;).em.getText()<br>    aqi = soup.find(<span class="hljs-string">&#x27;div&#x27;</span>, attrs=&#123;<span class="hljs-string">&#x27;class&#x27;</span>: <span class="hljs-string">&#x27;wea_alert clearfix&#x27;</span>&#125;).em.getText()<br>    aqi_num = re.search(<span class="hljs-string">r&#x27;\d+&#x27;</span>, aqi).group()<br>    aqi_num_zh = numtozh(<span class="hljs-built_in">int</span>(aqi_num))<br>    aqi = aqi.replace(aqi_num, aqi_num_zh).replace(<span class="hljs-string">&#x27; &#x27;</span>, <span class="hljs-string">&#x27;,空气质量&#x27;</span>)<br>    info = soup.find(<span class="hljs-string">&#x27;div&#x27;</span>, attrs=&#123;<span class="hljs-string">&#x27;class&#x27;</span>: <span class="hljs-string">&#x27;wea_tips clearfix&#x27;</span>&#125;).em.getText()<br>    sd = sd.replace(<span class="hljs-string">&#x27; &#x27;</span>, <span class="hljs-string">&#x27;百分之&#x27;</span>).replace(<span class="hljs-string">&#x27;%&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>)<br>    aqi = <span class="hljs-string">&#x27;空气质量指数&#x27;</span> + aqi<br>    info = info.replace(<span class="hljs-string">&#x27;，&#x27;</span>, <span class="hljs-string">&#x27;,&#x27;</span>)<br>    <span class="hljs-comment"># 获取今天的日期</span><br>    today = datetime.now().date().strftime(<span class="hljs-string">&#x27;%Y年%m月%d日&#x27;</span>)<br>    <span class="hljs-comment">#获取时间称呼</span><br>    am_pm = AMorPM(time.strftime(<span class="hljs-string">&#x27;%H&#x27;</span>,time.localtime(time.time())))<br>    <br>    <br>    <span class="hljs-comment"># 将获取的信息拼接成一句话</span><br>    text = <span class="hljs-string">&#x27;%s,今天是%s,天气%s,温度%s摄氏度,%s,%s,%s,%s&#x27;</span> % \<br>           (am_pm,today, weather, temp, sd, wind, aqi, info)<br>    <span class="hljs-keyword">return</span> text<br><br><br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">main</span>():</span><br>    <span class="hljs-comment"># 获取需要转换语音的文字</span><br>    text = get_weather()<br>    print(text)<br>    engine = pyttsx3.init()<br>    engine.say(text)<br>    engine.runAndWait()<br>    print(time.strftime(<span class="hljs-string">&#x27;%H&#x27;</span>,time.localtime(time.time())))<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    main()<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>小玩意</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数据分析-专业术语</title>
    <link href="/2021/03/18/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90-%E4%B8%93%E4%B8%9A%E6%9C%AF%E8%AF%AD/"/>
    <url>/2021/03/18/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90-%E4%B8%93%E4%B8%9A%E6%9C%AF%E8%AF%AD/</url>
    
    <content type="html"><![CDATA[<h1 id="数据分析-专业术语"><a class="markdownIt-Anchor" href="#数据分析-专业术语"></a> 数据分析-专业术语</h1><a id="more"></a><p>数据分析日常必备的知识储备-专业术语</p><p>按照以下三类进行汇总。</p><p>1、互联网常用名词解释</p><p>2、统计学名词解释</p><p>3、数据分析名词解释</p><h2 id="一-互联网常用名词解释"><a class="markdownIt-Anchor" href="#一-互联网常用名词解释"></a> <strong>一、互联网常用名词解释</strong></h2><h3 id="1-pvpage-view页面浏览量"><a class="markdownIt-Anchor" href="#1-pvpage-view页面浏览量"></a> <strong>1、PV（Page View）页面浏览量</strong></h3><p>指某段时间内访问网站或某一页面的用户的总数量，通常用来衡量一篇文章或一次活动带来的流量效果，也是评价网站日常流量数据的重要指标。PV可重复累计，以用户访问网站作为统计依据，用户每刷新一次即重新计算一次。</p><h3 id="2-uvunique-visitor独立访客"><a class="markdownIt-Anchor" href="#2-uvunique-visitor独立访客"></a> <strong>2、UV（Unique Visitor）独立访客</strong></h3><p>指来到网站或页面的用户总数，这个用户是独立的，同一用户不同时段访问网站只算作一个独立访客，不会重复累计，通常以PC端的Cookie数量作为统计依据。</p><h3 id="3-visit-访问"><a class="markdownIt-Anchor" href="#3-visit-访问"></a> <strong>3、Visit 访问</strong></h3><p>指用户通过外部链接来到网站，从用户来到网站到用户在浏览器中关闭页面，这一过程算作一次访问。</p><p>Visit可重复累计，比如我打开一个网站又关闭，再重新打开，这就算作两次访问。</p><h3 id="4-home-page-主页"><a class="markdownIt-Anchor" href="#4-home-page-主页"></a> <strong>4、Home Page 主页</strong></h3><p>指一个网站起主目录功能的页面，也是网站起点。通常是网站首页。</p><h3 id="5-landing-page-着陆页"><a class="markdownIt-Anchor" href="#5-landing-page-着陆页"></a> <strong>5、Landing Page 着陆页</strong></h3><p>指用户从外部链接来到网站，直接跳转到的第一个页面。比如朋友给我发了一个介绍爆款T恤的淘宝链接，我点开会直接跳转到介绍T恤的那个页面，而不是淘宝网众多其他页面之一，这个介绍T恤的页面可以算作是着陆页。</p><h3 id="6-bounce-rate-跳出率"><a class="markdownIt-Anchor" href="#6-bounce-rate-跳出率"></a> <strong>6、Bounce Rate 跳出率</strong></h3><p>指用户通过链接来到网站，在当前页面没有任何交互就离开网站的行为，这就算作此页面增加了一个“跳出”，跳出率一般针对网站的某个页面而言。</p><p>跳出率=在这个页面跳出的用户数/PV</p><h3 id="7-退出率"><a class="markdownIt-Anchor" href="#7-退出率"></a> <strong>7、退出率</strong></h3><p>一般针对某个页面而言。指用户访问某网站的某个页面之后，从浏览器中将与此网站相关的所有页面全部关闭，就算此页面增加了一个“退出“。</p><p>退出率=在这个页面退出的用户数/PV</p><h3 id="8-click-点击"><a class="markdownIt-Anchor" href="#8-click-点击"></a> <strong>8、Click 点击</strong></h3><p>一般针对付费广告而言，指用户点击某个链接、页面、banner的次数，可重复累计。比如我在PC端看到一则新闻链接点进去看了一会就关了，过了一会又点进去看了一遍，这就算我为这篇新闻贡献两次点击。</p><h3 id="9-avrtime-平均停留时长"><a class="markdownIt-Anchor" href="#9-avrtime-平均停留时长"></a> <strong>9、avr.time 平均停留时长</strong></h3><p>指某个页面被用户访问，在页面停留时长的平均值，通常用来衡量一个页面内容的质量。</p><p>avr.time=访客数量/用户总停留时长</p><h3 id="10-ctr-点击率"><a class="markdownIt-Anchor" href="#10-ctr-点击率"></a> <strong>10、CTR 点击率</strong></h3><p>指某个广告、Banner、URL被点击的次数和被浏览的总次数的比值。一般用来考核广告投放的引流效果。</p><p>CTR=点击数（click）/被用户看到的次数</p><h3 id="11-conversion-rate-转化率"><a class="markdownIt-Anchor" href="#11-conversion-rate-转化率"></a> <strong>11、Conversion rate 转化率</strong></h3><p>指用户完成设定的转化环节的次数和总会话人数的百分比，通常用来评价一个转化环节的好坏，如果转化率较低则急需优化该转化环节。</p><p>转化率=转化会话数/总会话数</p><h3 id="12-漏斗"><a class="markdownIt-Anchor" href="#12-漏斗"></a> <strong>12、漏斗</strong></h3><p>通常指产生目标转化前的明确流程，比如在淘宝购物，从点击商品链接到查看详情页，再到查看顾客评价、领取商家优惠券，再到填写地址、付款，每个环节都有可能流失用户，这就要求商家必须做好每一个转化环节，漏斗是评价转化环节优劣的指标。</p><h3 id="13-投资回报率roireturn-on-investment"><a class="markdownIt-Anchor" href="#13-投资回报率roireturn-on-investment"></a> <strong>13、投资回报率（ROI：Return On Investment ）</strong></h3><p>反映投入和产出的关系，衡量我这个投资值不值得，能给到我多少价值的东西（非单单的利润），这个是站在投资的角度或长远生意上看的。</p><p>其计算公式为：投资回报率（ROI）=年利润或年均利润/投资总额×100%，通常用于评估企业对于某项活动的价值，ROI高表示该项目价值高。</p><h3 id="14-重复购买率"><a class="markdownIt-Anchor" href="#14-重复购买率"></a> <strong>14、重复购买率</strong></h3><p>指消费者在网站中的重复购买次数。</p><h3 id="15-referrer-引荐流量"><a class="markdownIt-Anchor" href="#15-referrer-引荐流量"></a> <strong>15、Referrer 引荐流量</strong></h3><p>通常指将用户引导至目标页面的URL（超链接）。在百度统计中，引荐流量叫做“外部链接”。</p><h3 id="16-流失分析churn-analysisattrition-analysis"><a class="markdownIt-Anchor" href="#16-流失分析churn-analysisattrition-analysis"></a> <strong>16、流失分析（Churn Analysis/Attrition Analysis）</strong></h3><p>描述哪些顾客可能停止使用公司的产品/业务，以及识别哪些顾客的流失会带来最大损失。流失分析的结果用于为可能要流失的顾客准备新的优惠。</p><h3 id="17-顾客细分画像customer-segmentation-profiling"><a class="markdownIt-Anchor" href="#17-顾客细分画像customer-segmentation-profiling"></a> <strong>17、顾客细分&amp;画像（Customer Segmentation &amp; Profiling）</strong></h3><p>根据现有的顾客数据，将特征、行为相似的顾客归类分组。描述和比较各组。</p><h3 id="18-顾客的生命周期价值-lifetime-value-ltv"><a class="markdownIt-Anchor" href="#18-顾客的生命周期价值-lifetime-value-ltv"></a> <strong>18、顾客的生命周期价值 (Lifetime Value, LTV)</strong></h3><p>顾客在他/她的一生中为一个公司产生的预期折算利润。</p><h3 id="19-购物篮分析market-basket-analysis"><a class="markdownIt-Anchor" href="#19-购物篮分析market-basket-analysis"></a> <strong>19、购物篮分析（Market Basket Analysis）</strong></h3><p>识别在交易中经常同时出现的商品组合或服务组合，例如经常被一起购买的产品。此类分析的结果被用于推荐附加商品，为陈列商品的决策提供依据等。</p><h3 id="20-实时决策real-time-decisioning-rtd"><a class="markdownIt-Anchor" href="#20-实时决策real-time-decisioning-rtd"></a> <strong>20、实时决策（Real Time Decisioning, RTD）</strong></h3><p>帮助企业做出实时（近乎无延迟）的最优销售/营销决策。比如，实时决策系统（打分系统）可以通过多种商业规则或模型，在顾客与公司互动的瞬间，对顾客进行评分和排名。</p><h3 id="21-留存顾客留存retention-customer-retention"><a class="markdownIt-Anchor" href="#21-留存顾客留存retention-customer-retention"></a> <strong>21、留存/顾客留存（Retention / Customer Retention)</strong></h3><p>指建立后能够长期维持的客户关系的百分比。</p><h3 id="22-社交网络分析social-network-analysis-sna"><a class="markdownIt-Anchor" href="#22-社交网络分析social-network-analysis-sna"></a> <strong>22、社交网络分析（Social Network Analysis, SNA）</strong></h3><p>描绘并测量人与人、组与组、机构与机构、电脑与电脑、URL与URL、以及其他种类相连的信息/知识实体之间的关系与流动。这些人或组是网络中的节点，而它们之间的连线表示关系或流动。SNA为分析人际关系提供了一种方法，既是数学的又是视觉的。</p><h3 id="23-生存分析survival-analysis"><a class="markdownIt-Anchor" href="#23-生存分析survival-analysis"></a> <strong>23、生存分析（Survival Analysis）</strong></h3><p>估测一名顾客继续使用某业务的时间，或在后续时段流失的可能性。此类信息能让企业判断所要预测时段的顾客留存，并引入合适的忠诚度政策。</p><h2 id="二-统计学名词解释"><a class="markdownIt-Anchor" href="#二-统计学名词解释"></a> <strong>二、统计学名词解释</strong></h2><h3 id="1-绝对数和相对数"><a class="markdownIt-Anchor" href="#1-绝对数和相对数"></a> <strong>1、绝对数和相对数</strong></h3><p>绝对数：是反应客观现象总体在一定时间、一定地点下的总规模、总水平的综合性指标，也是数据分析中常用的指标。比如年GDP，总人口等等。</p><p>相对数：是指两个有联系的指标计算而得出的数值，它是反应客观现象之间的数量联系紧密程度的综合指标。相对数一般以倍数、百分数等表示。相对数的计算公式：</p><p>相对数=比较值（比数）/基础值（基数）</p><h3 id="2-百分比和百分点"><a class="markdownIt-Anchor" href="#2-百分比和百分点"></a> <strong>2、百分比和百分点</strong></h3><p>百分比：是相对数中的一种，他表示一个数是另一个数的百分之几，也成为百分率或百分数。百分比的分母是100，也就是用1%作为度量单位，因此便于比较。</p><p>百分点：是指不同时期以百分数的形式表示的相对指标的变动幅度，1%等于1个百分点。</p><h3 id="3-频数和频率"><a class="markdownIt-Anchor" href="#3-频数和频率"></a> <strong>3、频数和频率</strong></h3><p>频数：一个数据在整体中出现的次数。</p><p>频率：某一事件发生的次数与总的事件数之比。频率通常用比例或百分数表示。</p><h3 id="4-比例与比率"><a class="markdownIt-Anchor" href="#4-比例与比率"></a> <strong>4、比例与比率</strong></h3><p>比例：是指在总体中各数据占总体的比重，通常反映总体的构成和比例，即部分与整体之间的关系。</p><p>比率：是样本(或总体)中各不同类别数据之间的比值，由于比率不是部分与整体之间的对比关系，因而比值可能大于1。</p><h3 id="5-倍数和番数"><a class="markdownIt-Anchor" href="#5-倍数和番数"></a> <strong>5、倍数和番数</strong></h3><p>倍数：用一个数据除以另一个数据获得，倍数一般用来表示上升、增长幅度，一般不表示减少幅度。</p><p>番数：指原来数量的2的n次方。</p><h3 id="6-同比和环比"><a class="markdownIt-Anchor" href="#6-同比和环比"></a> <strong>6、同比和环比</strong></h3><p>同比：指的是与历史同时期的数据相比较而获得的比值，反应事物发展的相对性。</p><p>环比：指与上一个统计时期的值进行对比获得的值，主要反映事物的逐期发展的情况。</p><h3 id="7-变量"><a class="markdownIt-Anchor" href="#7-变量"></a> <strong>7、变量</strong></h3><p>变量来源于数学，是计算机语言中能储存计算结果或能表示值抽象概念。变量可以通过变量名访问。</p><h3 id="8-连续变量"><a class="markdownIt-Anchor" href="#8-连续变量"></a> <strong>8、连续变量</strong></h3><p>在统计学中，变量按变量值是否连续可分为连续变量与离散变量两种。在一定区间内可以任意取值的变量叫连续变量，其数值是连续不断的，相邻两个数值可作无限分割，即可取无限个数值。如:年龄、体重等变量。</p><h3 id="9-离散变量"><a class="markdownIt-Anchor" href="#9-离散变量"></a> <strong>9、离散变量</strong></h3><p>离散变量的各变量值之间都是以整数断开的，如人数、工厂数、机器台数等，都只能按整数计算。离散变量的数值只能用计数的方法取得。</p><h3 id="10-定性变量"><a class="markdownIt-Anchor" href="#10-定性变量"></a> <strong>10、定性变量</strong></h3><p>又名分类变量：观测的个体只能归属于几种互不相容类别中的一种时，一般是用非数字来表达其类别，这样的观测数据称为定性变量。可以理解成可以分类别的变量，如学历、性别、婚否等。</p><h3 id="11-均值"><a class="markdownIt-Anchor" href="#11-均值"></a> <strong>11、均值</strong></h3><p>即平均值，平均数是表示一组数据集中趋势的量数，是指在一组数据中所有数据之和再除以这组数据的个数。</p><h3 id="12-中位数"><a class="markdownIt-Anchor" href="#12-中位数"></a> <strong>12、中位数</strong></h3><p>对于有限的数集，可以通过把所有观察值高低排序后找出正中间的一个作为中位数。如果观察值有偶数个，通常取最中间的两个数值的平均数作为中位数。</p><h3 id="13-缺失值"><a class="markdownIt-Anchor" href="#13-缺失值"></a> <strong>13、缺失值</strong></h3><p>它指的是现有数据集中某个或某些属性的值是不完全的。</p><h3 id="14-缺失率"><a class="markdownIt-Anchor" href="#14-缺失率"></a> <strong>14、缺失率</strong></h3><p>某属性的缺失率=数据集中某属性的缺失值个数/数据集总行数。</p><h3 id="15-异常值"><a class="markdownIt-Anchor" href="#15-异常值"></a> <strong>15、异常值</strong></h3><p>指一组测定值中与平均值的偏差超过两倍标准差的测定值，与平均值的偏差超过三倍标准差的测定值，称为高度异常的异常值。</p><h3 id="16-方差"><a class="markdownIt-Anchor" href="#16-方差"></a> <strong>16、方差</strong></h3><p>是在概率论和统计方差衡量随机变量或一组数据时离散程度的度量。概率论中方差用来度量随机变量和其数学期望（即均值）之间的偏离程度。统计中的方差（样本方差）是每个样本值与全体样本值的平均数之差的平方值的平均数。在许多实际问题中，研究方差即偏离程度有着重要意义。方差是衡量源数据和期望值相差的度量值。</p><h3 id="17-标准差"><a class="markdownIt-Anchor" href="#17-标准差"></a> <strong>17、标准差</strong></h3><p>中文环境中又常称均方差，是离均差平方的算术平均数的平方根，用σ表示。标准差是方差的算术平方根。标准差能反映一个数据集的离散程度。平均数相同的两组数据，标准差未必相同。</p><h3 id="18-皮尔森相关系数"><a class="markdownIt-Anchor" href="#18-皮尔森相关系数"></a> <strong>18、皮尔森相关系数</strong></h3><p>皮尔森相关系数是用来反映两个变量线性相关程度的统计量。相关系数用r表示，其中n为样本量，分别为两个变量的观测值和均值。r描述的是两个变量间线性相关强弱的程度。r的绝对值越大表明相关性越强。</p><h3 id="19-相关系数"><a class="markdownIt-Anchor" href="#19-相关系数"></a> <strong>19、相关系数</strong></h3><p>相关系数是最早由统计学家卡尔·皮尔逊设计的统计指标，是研究变量之间线性相关程度的量，一般用字母r表示。由于研究对象的不同，相关系数有多种定义方式，较为常用的是皮尔森相关系数。</p><h3 id="20-特征值"><a class="markdownIt-Anchor" href="#20-特征值"></a> <strong>20、特征值</strong></h3><p>特征值是线性代数中的一个重要概念。在数学、物理学、化学、计算机等领域有着广泛的应用。设A是向量空间的一个线性变换，如果空间中某一非零向量通过A变换后所得到的向量和X仅差一个常数因子，即AX=kX，则称k为A的特征值，X称为A的属于特征值k的特征向量或特征矢量。</p><h2 id="三-数据分析名词解释"><a class="markdownIt-Anchor" href="#三-数据分析名词解释"></a> <strong>三、数据分析名词解释</strong></h2><h3 id="a"><a class="markdownIt-Anchor" href="#a"></a> A</h3><p>**聚合(Aggregation)：**搜索、合并、显示数据的过程。</p><p>**算法(Algorithms)：**可以完成某种数据分析的数学公式。</p><p>**分析法(Analytics)：**用于发现数据的内在涵义。</p><p>**异常检测(Anomaly detection)：**在数据集中搜索与预期模式或行为不匹配的数据项。除了“Anomalies”,用来表示异常的词有以下几种：outliers,exceptions,surprises,contaminants.他们通常可提供关键的可执行信息。</p><p>**匿名化(Anonymization)：**使数据匿名，即移除所有与个人隐私相关的数据。</p><p>**分析型客户关系管理（Analytical CRM/aCRM）：**用于支持决策，改善公司跟顾客的互动或提高互动的价值。针对有关顾客的知识，和如何与顾客有效接触的知识，进行收集、分析、应用。</p><h3 id="b"><a class="markdownIt-Anchor" href="#b"></a> B</h3><p>**行为分析法(Behavioural Analytics)：**这种分析法是根据用户的行为如“怎么做”，“为什么这么做”，以及“做了什么”来得出结论，而不是仅仅针对人物和时间的一门分析学科，它着眼于数据中的人性化模式。</p><p>**批量处理（Batch processing）：**尽管从大型计算机时代开始，批量处理就已经出现了。由于处理大型数据集，批量处理对大数据具有额外的意义。批量数据处理是处理一段时间内收集的大量数据的有效方式。</p><p><strong>商业智能（Business Intelligence）:</strong> 分析数据、展示信息以帮助企业的执行者、管理层、其他人员进行更有根据的商业决策的应用、设施、工具、过程。</p><h3 id="c"><a class="markdownIt-Anchor" href="#c"></a> C</h3><p>**分类分析(Classification analysis)：**从数据中获得重要的相关性信息的系统化过程;这类数据也被称为元数据(meta data),是描述数据的数据。</p><p>**云计算(Cloud computing)：**构建在网络上的分布式计算系统，数据是存储于机房外的（即云端）。</p><p>**集群计算（Cluster computing）：**这是一个使用多个服务器集合资源的“集群”的计算术语。要想更技术性的话，就会涉及到节点，集群管理层，负载平衡和并行处理等概念。</p><p>**聚类分析(Clustering analysis)：**它是将相似的对象聚合在一起，每类相似的对象组合成一个聚类(也叫作簇)的过程。这种分析方法的目的在于分析数据间的差异和相似性。</p><p>**冷数据存储(Cold data storage)：**在低功耗服务器上存储那些几乎不被使用的旧数据。但这些数据检索起来将会很耗时。</p><p>**对比分析(Comparative analysis)：**在非常大的数据集中进行模式匹配时，进行一步步的对比和计算过程得到分析结果。</p><p>**相关性分析(Correlation analysis)：**是一种数据分析方法，用于分析变量之间是否存在正相关，或者负相关。</p><h3 id="d"><a class="markdownIt-Anchor" href="#d"></a> D</h3><p>**仪表板(Dashboard)：**使用算法分析数据，并将结果用图表方式显示于仪表板中。</p><p>**数据聚合工具(Data aggregation tools)：**将分散于众多数据源的数据转化成一个全新数据源的过程。</p><p>**数据分析师(Data analyst)：**从事数据分析、建模、清理、处理的专业人员。</p><p>**数据库(Database)：**一个以某种特定的技术来存储数据集合的仓库。</p><p>**数据湖（Data lake）：**数据湖是原始格式的企业级数据的大型存储库。与此同时我们可以涉及数据仓库，它在概念上是相似的，也是企业级数据的存储库，但在清理、与其他来源集成之后是以结构化格式。数据仓库通常用于常规数据（但不是专有的）。数据湖使得访问企业级数据更加容易，你需要明确你要寻找什么，以及如何处理它并明智地试用它。</p><p>**暗数据（Dark Data）：**基本上指的是，由企业收集和处理的，但并不用于任何意义性目的的数据，因此它是“暗”的，可能永远不会被分析。它可以是社交网络反馈，呼叫中心日志，会议笔记等等。有很多人估计，所有企业数据中的 60-90％ 可能是“暗数据”，但谁又真正知道呢？</p><p>**数据挖掘（Data mining)：**数据挖掘是通过使用复杂的模式识别技术，从而找到有意义的模式，并得出大量数据的见解。</p><p>**数据中心(Data centre)：**一个实体地点，放置了用来存储数据的服务器。</p><p>**数据清洗(Data cleansing)：**对数据进行重新审查和校验的过程，目的在于删除重复信息、纠正存在的错误，并提供数据一致性。</p><p>**数据质量（Data Quality）：**有关确保数据可靠性和实用价值的过程和技术。高质量的数据应该忠实体现其背后的事务进程，并能满足在运营、决策、规划中的预期用途。</p><p>**数据订阅(Data feed)：**一种数据流，例如Twitter订阅和RSS。</p><p>**数据集市(Data Mart)：**进行数据集买卖的在线交易场所。</p><p>**数据建模(Data modelling)：**使用数据建模技术来分析数据对象，以此洞悉数据的内在涵义。</p><p>**数据集(Data set)：**大量数据的集合。</p><p>**数据虚拟化(Data virtualization)：**数据整合的过程，以此获得更多的数据信息，这个过程通常会引入其他技术，例如数据库，应用程序，文件系统，网页技术，大数据技术等等。</p><p>**判别分析(Discriminant analysis)：**将数据分类，按不同的分类方式，可将数据分配到不同的群组，类别或者目录。是一种统计分析法，可以对数据中某些群组或集群的已知信息进行分析，并从中获取分类规则。</p><p>**分布式文件系统(Distributed File System)：**提供简化的，高可用的方式来存储、分析、处理数据的系统。</p><p>**文件存贮数据库(Document Store Databases)：**又称为文档数据库，为存储、管理、恢复文档数据而专门设计的数据库，这类文档数据也称为半结构化数据。</p><h3 id="e"><a class="markdownIt-Anchor" href="#e"></a> E</h3><p>**探索性分析(Exploratory analysis)：**在没有标准的流程或方法的情况下从数据中发掘模式。是一种发掘数据和数据集主要特性的一种方法。</p><p>**提取-转换-加载(ETL:Extract,Transform and Load)：**是一种用于数据库或者数据仓库的处理过程，天善学院有国内唯一的最全的ETL学习课程。即从各种不同的数据源提取(E)数据，并转换(T)成能满足业务需要的数据，最后将其加载(L)到数据库。</p><h3 id="g"><a class="markdownIt-Anchor" href="#g"></a> G</h3><p>**游戏化(Gamification)：**在其他非游戏领域中运用游戏的思维和机制，这种方法可以以一种十分友好的方式进行数据的创建和侦测，非常有效。</p><p>**图形数据库(Graph Databases)：**运用图形结构(例如，一组有限的有序对，或者某种实体)来存储数据，这种图形存储结构包括边缘、属性和节点。它提供了相邻节点间的自由索引功能，也就是说，数据库中每个元素间都与其他相邻元素直接关联。</p><p>**网格计算(Grid computing)：**将许多分布在不同地点的计算机连接在一起，用以处理某个特定问题，通常是通过云将计算机相连在一起。</p><h3 id="h"><a class="markdownIt-Anchor" href="#h"></a> H</h3><p>**Hadoop：**一个开源的分布式系统基础框架，可用于开发分布式程序，进行大数据的运算与存储。</p><p>**Hadoop数据库(HBase)：**一个开源的、非关系型、分布式数据库，与Hadoop框架共同使用。</p><p>**HDFS：**Hadoop分布式文件系统(Hadoop Distributed File System)；是一个被设计成适合运行在通用硬件(commodity hardware)上的分布式文件系统。</p><p>**高性能计算(HPC:High-Performance-Computing)：**使用超级计算机来解决极其复杂的计算问题。</p><h3 id="i"><a class="markdownIt-Anchor" href="#i"></a> I</h3><p>**内存数据库(IMDB:In-memory)：**一种数据库管理系统，与普通数据库管理系统不同之处在于，它用主存来存储数据，而非硬盘。其特点在于能高速地进行数据的处理和存取。</p><p>**物联网（IoT）：**最新的流行语是物联网（IOT）。IOT通过互联网将嵌入式对象（传感器，可穿戴设备，汽车，冰箱等）中的计算设备进行互连，并且能够发送以及接收数据。IOT生成大量数据，提供了大量大数据分析的机会。</p><h3 id="k"><a class="markdownIt-Anchor" href="#k"></a> K</h3><p>**键值数据库(Key-Value Databases)：**数据的存储方式是使用一个特定的键，指向一个特定的数据记录，这种方式使得数据的查找更加方便快捷。键值数据库中所存的数据通常为编程语言中基本数据类型的数据。</p><h3 id="l"><a class="markdownIt-Anchor" href="#l"></a> L</h3><p>**负载均衡(Load balancing)：**将工作量分配到多台电脑或服务器上，以获得最优结果和最大的系统利用率。</p><p>**位置信息(Location data)：**GPS信息，即地理位置信息。</p><p>**日志文件(Log file)：**由计算机系统自动生成的文件，记录系统的运行过程。</p><h3 id="m"><a class="markdownIt-Anchor" href="#m"></a> M</h3><p>**M2M数据(Machine 2 Machine data)：**两台或多台机器间交流与传输的内容。</p><p>**机器数据(Machine data)：**由传感器或算法在机器上产生的数据。</p><p>**机器学习(Machine learning)：**人工智能的一部分，指的是机器能够从它们所完成的任务中进行自我学习，通过长期的累积实现自我改进。</p><p>**Map Reduce：**是处理大规模数据的一种软件框架(Map:映射，Reduce:归纳)。</p><p>**大规模并行处理(MPP:Massivel yParallel Processing)：**同时使用多个处理器(或多台计算机)处理同一个计算任务。</p><p>**元数据(Meta data)：**被称为描述数据的数据，即描述数据数据属性(数据是什么)的信息。</p><p>**多维数据库(Multi-Dimensional Databases)：**用于优化数据联机分析处理(OLAP)程序，优化数据仓库的一种数据库。</p><p>**多值数据库(MultiValue Databases)：**是一种非关系型数据库(NoSQL),一种特殊的多维数据库：能处理3个维度的数据。主要针对非常长的字符串，能够完美地处理HTML和XML中的字串。</p><h3 id="n"><a class="markdownIt-Anchor" href="#n"></a> N</h3><p>**自然语言处理(Natural Language Processing)：**是计算机科学的一个分支领域，它研究如何实现计算机与人类语言之间的交互。</p><p>**网络分析(Network analysis)：**分析网络或图论中节点间的关系，即分析网络中节点间的连接和强度关系。</p><p>**NewSQL：**一个优雅的、定义良好的数据库系统，比SQL更易学习和使用，比NoSQL更晚提出的新型数据库。</p><p>**NoSQL：**顾名思义，就是“不使用SQL”的数据库。这类数据库泛指传统关系型数据库以外的其他类型的数据库。这类数据库有更强的一致性，能处理超大规模和高并发的数据。</p><h3 id="o"><a class="markdownIt-Anchor" href="#o"></a> O</h3><p><strong>对象数据库(Object Databases)：</strong>(也称为面象对象数据库)以对象的形式存储数据，用于面向对象编程。它不同于关系型数据库和图形数据库，大部分对象数据库都提供一种查询语言，允许使用声明式编程(declarative programming)访问对象。</p><p>**基于对象图像分析(Object-based Image Analysis)：**数字图像分析方法是对每一个像素的数据进行分析，而基于对象的图像分析方法则只分析相关像素的数据，这些相关像素被称为对象或图像对象。</p><p>**操作型数据库(Operational Databases)：**这类数据库可以完成一个组织机构的常规操作，对商业运营非常重要，一般使用在线事务处理，允许用户访问、收集、检索公司内部的具体信息。</p><p>**优化分析(Optimization analysis)：**在产品设计周期依靠算法来实现的优化过程，在这一过程中，公司可以设计各种各样的产品并测试这些产品是否满足预设值。</p><p>**本体论(Ontology）：**表示知识本体，用于定义一个领域中的概念集及概念之间的关系的一种哲学思想。(译者注:数据被提高到哲学的高度，被赋予了世界本体的意义，成为一个独立的客观数据世界)</p><p>**异常值检测(Outlier detection)：**异常值是指严重偏离一个数据集或一个数据组合总平均值的对象，该对象与数据集中的其他它相去甚远，因此，异常值的出现意味着系统发生问题，需要对此另加分析。</p><p>**联机分析处理（On-Line Analytical Processing，OLAP）：**能让用户轻松制作、浏览报告的工具，这些报告总结相关数据，并从多角度分析。</p><h3 id="p"><a class="markdownIt-Anchor" href="#p"></a> P</h3><p>**模式识别(Pattern Recognition)：**通过算法来识别数据中的模式，并对同一数据源中的新数据作出预测</p><p>**平台即服务(PaaS:Platform-as-a-Service)：**为云计算解决方案提供所有必需的基础平台的一种服务。</p><p>**预测分析(Predictive analysis)：**大数据分析方法中最有价值的一种分析方法，这种方法有助于预测个人未来(近期)的行为，例如某人很可能会买某些商品，可能会访问某些网站，做某些事情或者产生某种行为。通过使用各种不同的数据集，例如历史数据，事务数据，社交数据，或者客户的个人信息数据，来识别风险和机遇。</p><p>**公共数据(Public data)：**由公共基金创建的公共信息或公共数据集。</p><h3 id="q"><a class="markdownIt-Anchor" href="#q"></a> Q</h3><p>**数字化自我(Quantified Self)：**使用应用程序跟踪用户一天的一举一动，从而更好地理解其相关的行为。</p><h3 id="r"><a class="markdownIt-Anchor" href="#r"></a> R</h3><p>**R：**是一种编程语言，在统计计算方面很出色。如果你不知道 R，你就称不上是数据科学家。R 是数据科学中最受欢迎的语言之一。</p><p>**再识别(Re-identification)：**将多个数据集合并在一起，从匿名化的数据中识别出个人信息。</p><p>**回归分析(Regression analysis)：**确定两个变量间的依赖关系。这种方法假设两个变量之间存在单向的因果关系(译者注：自变量，因变量，二者不可互换)。</p><p>**实时数据(Real-time data)：**指在几毫秒内被创建、处理、存储、分析并显示的数据。</p><p>**推荐引擎(Recommendation engine)：**推荐引擎算法根据用户之前的购买行为或其他购买行为向用户推荐某种产品。</p><p><strong>路径分析(Routing analysis)：</strong>–针对某种运输方法通过使用多种不同的变量分析从而找到一条最优路径，以达到降低燃料费用，提高效率的目的。</p><h3 id="s"><a class="markdownIt-Anchor" href="#s"></a> S</h3><p>**半结构化数据(Semi-structured data)：**半结构化数据并不具有结构化数据严格的存储结构，但它可以使用标签或其他形式的标记方式以保证数据的层次结构。</p><p>**结构化数据(Structured data)：**可以组织成行列结构，可识别的数据。这类数据通常是一条记录，或者一个文件，或者是被正确标记过的数据中的某一个字段，并且可以被精确地定位到。</p><p>**情感分析(Sentiment Analysis)：**通过算法分析出人们是如何看待某些话题。</p><p>**信号分析(Signal analysis)：**指通过度量随时间或空间变化的物理量来分析产品的性能。特别是使用传感器数据。</p><p>**相似性搜索(Similarity searches)：**在数据库中查询最相似的对象，这里所说的数据对象可以是任意类型的数据。</p><p>**仿真分析(Simulation analysis)：**仿真是指模拟真实环境中进程或系统的操作。仿真分析可以在仿真时考虑多种不同的变量，确保产品性能达到最优。</p><p>**软件即服务(SaaS:Software-as-a-Service)：**基于Web的通过浏览器使用的一种应用软件。</p><p>**空间分析(Spatial analysis)：**空间分析法分析地理信息或拓扑信息这类空间数据，从中得出分布在地理空间中的数据的模式和规律。</p><p>**SQL：**在关系型数据库中，用于检索数据的一种编程语言。</p><p>**流处理（Stream processing）：**流处理旨在对有“连续”要求的实时和流数据进行处理。结合流分析，即在流内不间断地计算数学或统计分析的能力。流处理解决方案旨在对高流量进行实时处理。</p><h3 id="t"><a class="markdownIt-Anchor" href="#t"></a> T</h3><p>**时序分析(Time series analysis)：**分析在重复测量时间里获得的定义良好的数据。分析的数据必须是良好定义的，并且要取自相同时间间隔的连续时间点。</p><p>**拓扑数据分析(Topological Data Analysis)：**拓扑数据分析主要关注三点：复合数据模型、集群的识别、以及数据的统计学意义。</p><p>**交易数据(Transactional data)：**随时间变化的动态数据</p><p><strong>透明性(Transparency)：</strong>–消费者想要知道他们的数据有什么作用、被作何处理，而组织机构则把这些信息都透明化了。</p><p>**文本挖掘（Text Mining）：**对包含自然语言的数据的分析。对源数据中词语和短语进行统计计算，以便用数学术语表达文本结构，之后用传统数据挖掘技术分析文本结构。</p><h3 id="u"><a class="markdownIt-Anchor" href="#u"></a> U</h3><p>**非结构化数据(Un-structured data)：**非结构化数据一般被认为是大量纯文本数据，其中还可能包含日期，数字和实例。</p><h3 id="v"><a class="markdownIt-Anchor" href="#v"></a> V</h3><p><strong>价值(Value)：</strong>(译者注：大数据4V特点之一)所有可用的数据，能为组织机构、社会、消费者创造出巨大的价值。这意味着各大企业及整个产业都将从大数据中获益。</p><p>**可变性(Variability)：**也就是说，数据的含义总是在（快速）变化的。例如，一个词在相同的推文中可以有完全不同的意思。</p><p><strong>多样(Variety)：</strong>(译者注：大数据4V特点之一)数据总是以各种不同的形式呈现，如结构化数据，半结构化数据，非结构化数据，甚至还有复杂结构化数据</p><p><strong>高速(Velocity)：</strong>(译者注：大数据4V特点之一)在大数据时代，数据的创建、存储、分析、虚拟化都要求被高速处理。</p><p>**真实性(Veracity)：**组织机构需要确保数据的真实性，才能保证数据分析的正确性。因此，真实性(Veracity)是指数据的正确性。</p><p>**可视化(Visualization)：**只有正确的可视化，原始数据才可被投入使用。这里的“可视化”并非普通的图型或饼图，可视化指是的复杂的图表，图表中包含大量的数据信息，但可以被很容易地理解和阅读。</p><p><strong>大量(Volume)：</strong>(译者注：大数据4V特点之一)指数据量，范围从Megabytes至Brontobytes。</p><h3 id="w"><a class="markdownIt-Anchor" href="#w"></a> W</h3><p>**天气数据(Weather data)：**是一种重要的开放公共数据来源，如果与其他数据来源合成在一起，可以为相关组织机构提供深入分析的依据。</p><p>**网络挖掘/网络数据挖掘（Web Mining / Web Data Mining)：**使用数据挖掘技术从互联网站点、文档或服务中自动发现和提取信息。</p><h3 id="x"><a class="markdownIt-Anchor" href="#x"></a> X</h3><p>**XML数据库(XML Databases)：**XML数据库是一种以XML格式存储数据的数据库。XML数据库通常与面向文档型数据库相关联，开发人员可以对XML数据库的数据进行查询，导出以及按指定的格式序列化。</p>]]></content>
    
    
    <categories>
      
      <category>数据分析</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据分析</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>sql窗口函数</title>
    <link href="/2021/03/10/sql%E7%AA%97%E5%8F%A3%E5%87%BD%E6%95%B0/"/>
    <url>/2021/03/10/sql%E7%AA%97%E5%8F%A3%E5%87%BD%E6%95%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="mysql-窗口函数"><a class="markdownIt-Anchor" href="#mysql-窗口函数"></a> Mysql 窗口函数</h1><p><a href="https://www.zhihu.com/people/xun-xiao-xun-27-34"><strong>来源于知乎：薄荷学姐mint</strong></a></p><a id="more"></a><h2 id="含义"><a class="markdownIt-Anchor" href="#含义"></a> 含义</h2><p>窗口函数也叫OLAP函数（Online Anallytical Processing,联机分析处理），可以对数据进行实时分析处理。</p><h2 id="作用"><a class="markdownIt-Anchor" href="#作用"></a> 作用</h2><ul><li>解决排名问题</li><li>解决TOPN问题</li></ul><h2 id="语法"><a class="markdownIt-Anchor" href="#语法"></a> 语法</h2><p>select 窗口函数 over (partition by 用于分组的列名， order by 用于排序的列名)</p><h2 id="分类"><a class="markdownIt-Anchor" href="#分类"></a> 分类</h2><ul><li>专用窗口函数：rank()，dense_rank()，row_number()</li><li>汇总函数：max()，min()，count()，sum()，avg()</li></ul><h2 id="窗口函数的用法"><a class="markdownIt-Anchor" href="#窗口函数的用法"></a> <strong>窗口函数的用法</strong></h2><ol><li><h3 id="专用窗口函数"><a class="markdownIt-Anchor" href="#专用窗口函数"></a> <strong>专用窗口函数</strong></h3></li></ol><h4 id="rank函数"><a class="markdownIt-Anchor" href="#rank函数"></a> <strong>rank()函数</strong></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mysql">#按班级分类，将成绩降序排序<br>SELECT*,<br>rank() over ( PARTITION BY 班级 ORDER BY 成绩 DESC)  AS ranking  <br>FROM class; <br></code></pre></td></tr></table></figure><p><strong>说明</strong></p><ul><li>rank()是排序函数，括号中不需要有参数；</li><li>通过partition by将班级分类，相当于之前用过的group by子句功能，但是group by子句分类汇总会改变原数据的行数，而用窗口函数自救保持原行数；</li><li>通过order by将成绩降序排列，与之前学的order by子句用法一样，后边可以升序asc或者降序desc；</li></ul><p><strong>总结：</strong></p><ul><li>窗口函数这里的“窗口”表示范围，可以理解为将原数据划分范围，即分组，然后用函数实现某些目的</li><li>窗口函数有分组和排序的功能</li><li>不减少原表的行数</li></ul><h4 id="2-其他专用窗口函数dense_rankrow_number"><a class="markdownIt-Anchor" href="#2-其他专用窗口函数dense_rankrow_number"></a> <strong>2. 其他专用窗口函数：dense_rank/row_number</strong></h4><ul><li>用法与rank（）函数相同</li></ul><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs text">SELECT*,<br>dense_rank() over ( PARTITION BY 班级 ORDER BY 成绩 DESC)  AS ranking  <br>FROM class;  <br>SELECT*,<br>row_number() over ( PARTITION BY 班级 ORDER BY 成绩 DESC)  AS ranking  <br>FROM class; <br></code></pre></td></tr></table></figure><ul><li>当成绩相同时，会存在并列的情况，<strong>主要区别是三个函数如何处理并列情况</strong>：</li></ul><p>在rank()函数，如果有并列情况，会占用下一个名次的位置，比如，成绩为100的学生有三个并列第一，那么99分的学生是第二名，通过rank()函数，名次是：1,1,1,4；</p><p>在dense()函数中，如果有并列的情况，不会占用下一个名词，同用上个例子，名次是：1,1,1,2；</p><p>在row_number()函数中，会忽略并列的情况，同用上述例子，名次是：1,2,3,4;</p><p><img src="https://pic4.zhimg.com/80/v2-8921dbd101fa03fedc5ae9cdb34d5037_720w.jpg" alt="img" /></p><ul><li><strong>案例</strong></li></ul><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs text">#要求按成绩排名，如果出现并列，需要出现类似1,1,1,2的形式<br>SELECT *,<br>dense_rank() over (PARTITION BY 班级 ORDER BY 成绩) AS 排名<br>FROM class;<br><br>#在test1表中按成绩排名，如果有并列情况，则两个分数的排名相同，也就是平分后的下一个名词应该是下一个连续的整数值，名词之间不应该有间隔<br>dense_rank () over (ORDER BY score DESC) AS ranking<br>FROM test1;<br></code></pre></td></tr></table></figure><p><img src="https://pic3.zhimg.com/80/v2-a210dc64e2b2232bdf01bad98494474a_720w.jpg" alt="img" /></p><h2 id="经典面试问题-topn问题"><a class="markdownIt-Anchor" href="#经典面试问题-topn问题"></a> <strong>经典面试问题-topN问题</strong></h2><ol><li><strong>相关业务问题</strong>：</li></ol><ul><li>每个类别下用户最喜欢的产品是哪个？</li><li>每个类别下用户点击最多的5个商品是什么？</li></ul><p>*<strong>这类问题就需要分组取最大值，最小值，每组最大的n条记录*</strong></p><p><strong>2. 解决方法</strong></p><ul><li><strong>分组取最大值(用关联子查询）</strong></li></ul><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs text">#查询每个学号成绩是最大的所有信息<br>SELECT* FROM score AS a <br>WHERE 成绩=( SELECT MAX(成绩) <br>FROM score AS b <br>WHERE a.`学号`=b.`学号`); <br></code></pre></td></tr></table></figure><p><img src="https://pic3.zhimg.com/80/v2-31bdcce9bf89e8da823888177bde988e_720w.jpg" alt="img" /></p><p><em>注意：因为0003号选择的三个课程成绩一样，所以最大成绩有三个</em></p><ul><li><strong>分组取最小值</strong></li></ul><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs text">#查询每个学号成绩是最大的所有信息<br>SELECT* <br>FROM score AS a <br>WHERE 成绩=( SELECT MIN(成绩) <br>FROM score AS b <br>WHERE a.`学号`=b.`学号`); <br></code></pre></td></tr></table></figure><p><img src="https://pic3.zhimg.com/80/v2-57cd1d523591c9a895c09a929de7e51a_720w.jpg" alt="img" /></p><p><em>注意：因为0003号选择的三个课程成绩一样，所以最小成绩有三个</em></p><ul><li><strong>分组取最大N条记录</strong></li></ul><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs text">#查询每个学生成绩最高的两个科目<br>SELECT *<br>FROM (SELECT*,row_number() over (PARTITION BY 姓名 ORDER BY 成绩 DESC) AS ranking <br>FROM test1) AS newtest<br>WHERE ranking&lt;=2;<br></code></pre></td></tr></table></figure><p>说明</p><ul><li>为了不受并列的影响，该题用row_number()</li><li>注意在子查询后边加<strong>别名</strong></li><li>易错的写法：select*,row_number() over(partition by 姓名 order by 成绩 desc） as ranking from test where ranking&lt;=2;按照<strong>sql运行顺序</strong>，where后边不能加别名，因为select子句在where子句之后运行</li><li>涉及到既要分组又要排序的情况，要想到用窗口函数</li></ul><p><strong>TOPN问题模板</strong></p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs text">SELECT *<br>FROM (SELECT*,row_number() over (PARTITION BY 姓名 ORDER BY 成绩 DESC) AS ranking <br>FROM test1) AS newtest<br>WHERE ranking&lt;=N;<br></code></pre></td></tr></table></figure><h2 id="聚合函数作为窗口函数"><a class="markdownIt-Anchor" href="#聚合函数作为窗口函数"></a> <strong>聚合函数作为窗口函数</strong></h2><p><strong>作用</strong>：聚合函数作为窗口函数，是起到&quot;累加/累计&quot;的效果，比如，就是截止到本行，最大值？最小值是多少</p><p><strong>与专用窗口函数的区别</strong>：括号中需要有指定列，不能为空</p><p><strong>用法</strong>：与专用窗口函数相同</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs text">#查询成绩的累加 <br>SELECT*, SUM(成绩) over (ORDER BY 成绩 DESC) AS &#x27;求和&#x27; <br>FROM class; <br></code></pre></td></tr></table></figure><p><strong>案例</strong></p><p>#查找单科成绩高于该科目平均成绩的学生名单</p><p><strong>法一解题思路：</strong></p><ul><li>单科成绩，表示需要按科目进行分组，分组有两种：group by子句和窗口函数的partition by；</li><li>要求平均值，需要通过avg()实现，并且找到大于平均值的学生，那么不能减少行数，则用partition by；</li></ul><p><strong>步骤：</strong></p><ul><li><strong>聚合函数作为窗口函数</strong></li></ul><p><img src="https://pic4.zhimg.com/80/v2-251a271e216e8e091a9863f6cf38c58b_720w.jpg" alt="img" /></p><ul><li><strong>与平均值比较</strong></li></ul><p><strong>注意</strong>这里不能用where 成绩&gt;分组平均值，因为where子句在select子句之后执行</p><p><strong>正确语句是套用子查询</strong>：</p><p><img src="https://pic3.zhimg.com/80/v2-f4224c5f20623223e5df763a89f9f25a_720w.jpg" alt="img" /></p><p><strong>法二关联子查询</strong></p><p><strong>思路</strong></p><ul><li>单科成绩：需要对每门科目进行分组</li><li>平均成绩：avg()求每组的平均值</li><li>学生名单：输出信息中需要有学生姓名</li></ul><p><strong>步骤1：求分组平均值</strong></p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs text">SELECT AVG(成绩) AS 平均值,科目 <br>FROM test3  <br>GROUP BY 科目； <br></code></pre></td></tr></table></figure><p><strong>步骤2：比较</strong></p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs text">SELECT* <br>FROM test3 AS a <br>WHERE 成绩&gt;(SELECT AVG(成绩) AS 平均值 <br>FROM test3 AS b <br>WHERE a.`科目`=b.`科目`); <br></code></pre></td></tr></table></figure><p><em>因为是按照科目分组，所以应该将科目进行关联</em></p><h2 id="窗口函数的移动平均以平均值为例"><a class="markdownIt-Anchor" href="#窗口函数的移动平均以平均值为例"></a> <strong>窗口函数的移动平均（以平均值为例）</strong></h2><p>**作用：**通过preceding,following,current row等调整作用范围，基本语法为</p><p>ROWS BETWEEN 一个时间点 AND 一个时间点</p><p><strong>时间点</strong>可以表示为：</p><ul><li>n PRECEDING : 前n行</li><li>n FOLLOWING：后n行</li><li>CURRENT ROW ： 当前行</li><li>UNBOUNDED PRECEDING：窗口第一行</li><li>UNBOUNDED FOLLOWING：窗口的最后一行</li></ul><p><strong>用法：</strong></p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs text">#查询前两行到当前行的平均成绩<br>SELECT *,<br>AVG(成绩) over (ORDER BY 姓名 ROWS 2 preceding) AS result <br>FROM test3;<br></code></pre></td></tr></table></figure><p><strong>解释：</strong></p><p>rows N proceding—N表示在当前行的前N行，比如，N=2，当前行在第4行，那么该平均值是第2行，第3行，第4行，这三行数据的平均值</p><h2 id="注意事项"><a class="markdownIt-Anchor" href="#注意事项"></a> <strong>注意事项</strong></h2><ul><li>窗口函数中的如果省略partition by，则结果不进行分组，则以整个表为范围，也就是窗口为整个表；</li><li>如果省略order by 则不进行排序；</li></ul><h2 id="总结"><a class="markdownIt-Anchor" href="#总结"></a> <strong>总结</strong></h2><p><strong>1.窗口函数的语法：</strong></p><p>窗口函数 over (partition by 用于分列的列名 order by 用于排序的列名）；</p><p>**2.功能：**既能分组又可以排序，且不改变行数</p><p><strong>3.分类：</strong></p><ul><li>专用窗口函数—rank(),dense_rank(),row_number()（<em>括号中没有参数，注意区分三者区别）</em></li><li>聚合函数—max(),min(),sum(),avg(),count() <em>(括号中有参数）</em></li></ul><p><strong>4.注意事项</strong></p><p>原则上一般写在<strong>select子句</strong>中</p><p><strong>5.应用场景</strong></p><ul><li>经典TOPN问题：找出每个部门工资排名前N的员工</li></ul><p><strong>模板</strong>：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs text">select*<br>from（select*，row_number() over (partition by 部门 order by salary desc) as ranking<br>from 表名) as a<br>where ranking&lt;=N;<br></code></pre></td></tr></table></figure><p><em>注意：不要忘记起别名，子查询的别名以及排序结果的别名</em></p><ul><li>经典排名问题</li></ul><p>业务需求“在每个组内排名”，比如，每个部门按业绩来排名</p><ul><li>在每个组内比较问题</li></ul><p>可以用关联子查询，也可以用窗口函数实现</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>逻辑回归原理</title>
    <link href="/2021/03/06/%E9%80%BB%E8%BE%91%E5%9B%9E%E5%BD%92%E5%8E%9F%E7%90%86/"/>
    <url>/2021/03/06/%E9%80%BB%E8%BE%91%E5%9B%9E%E5%BD%92%E5%8E%9F%E7%90%86/</url>
    
    <content type="html"><![CDATA[<h1 id="逻辑回归算法原理"><a class="markdownIt-Anchor" href="#逻辑回归算法原理"></a> 逻辑回归算法原理</h1><a id="more"></a><h2 id="简介"><a class="markdownIt-Anchor" href="#简介"></a> 简介</h2><p>1.逻辑回归叫做逻辑回归，但实际时分类算法，经典的二分类算法</p><p>2.机器学习算法选择：先逻辑回归再用复杂的，能简单的还是要用简单的</p><blockquote><p>算法复杂过拟合风险越大，模型复杂度太高，无论训练和利用难度都较大，较复杂</p></blockquote><p>3.逻辑回归的决策边界：可以是非线形的</p><p>未完待续</p>]]></content>
    
    
    <categories>
      
      <category>machine learning</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ml</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>sql语句随用随记</title>
    <link href="/2021/03/03/sql%E8%AF%AD%E5%8F%A5%E9%9A%8F%E7%94%A8%E9%9A%8F%E8%AE%B0/"/>
    <url>/2021/03/03/sql%E8%AF%AD%E5%8F%A5%E9%9A%8F%E7%94%A8%E9%9A%8F%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="sql语句随用随记"><a class="markdownIt-Anchor" href="#sql语句随用随记"></a> sql语句随用随记</h1><a id="more"></a><h2 id="命令"><a class="markdownIt-Anchor" href="#命令"></a> 命令</h2><h3 id="1sql执行顺序"><a class="markdownIt-Anchor" href="#1sql执行顺序"></a> 1.sql执行顺序</h3><ol><li>from</li><li>join</li><li>on</li><li>where</li><li>group by(开始使用select中的别名，后面的语句中都可以使用)</li><li>avg,sum…</li><li>having</li><li>select</li><li>distinct</li><li>order by</li><li>limit</li></ol><blockquote><p>第一步：首先对from子句中的前两个表执行一个笛卡尔乘积，此时生成虚拟表 vt1（选择相对小的表做基础表）。</p><p>第二步：接下来便是应用on筛选器，on 中的逻辑表达式将应用到 vt1 中的各个行，筛选出满足on逻辑表达式的行，生成虚拟表 vt2 。</p><p>第三步：如果是outer join 那么这一步就将添加外部行，left outer jion 就把左表在第二步中过滤的添加进来，如果是right outer join 那么就将右表在第二步中过滤掉的行添加进来，这样生成虚拟表 vt3 。</p><p>第四步：如果 from 子句中的表数目多余两个表，那么就将vt3和第三个表连接从而计算笛卡尔乘积，生成虚拟表，该过程就是一个重复1-3的步骤，最终得到一个新的虚拟表 vt3。</p><p>第五步：应用where筛选器，对上一步生产的虚拟表引用where筛选器，生成虚拟表vt4，在这有个比较重要的细节不得不说一下，对于包含outer join子句的查询，就有一个让人感到困惑的问题，到底在on筛选器还是用where筛选器指定逻辑表达式呢？on和where的最大区别在于，如果在on应用逻辑表达式那么在第三步outer join中还可以把移除的行再次添加回来，而where的移除的最终的。举个简单的例子，有一个学生表（班级,姓名）和一个成绩表(姓名,成绩)，我现在需要返回一个x班级的全体同学的成绩，但是这个班级有几个学生缺考，也就是说在成绩表中没有记录。为了得到我们预期的结果我们就需要在on子句指定学生和成绩表的关系（学生.姓名=成绩.姓名）那么我们是否发现在执行第二步的时候，对于没有参加考试的学生记录就不会出现在vt2中，因为他们被on的逻辑表达式过滤掉了,但是我们用left outer join就可以把左表（学生）中没有参加考试的学生找回来，因为我们想返回的是x班级的所有学生，如果在on中应用学生.班级='x’的话，left outer join会把x班级的所有学生记录找回（感谢网友康钦谋__康钦苗的指正），所以只能在where筛选器中应用学生.班级=‘x’ 因为它的过滤是最终的。</p><p>第六步：group by 子句将中的唯一的值组合成为一组，得到虚拟表vt5。如果应用了group by，那么后面的所有步骤都只能得到的vt5的列或者是聚合函数（count、sum、avg等）。原因在于最终的结果集中只为每个组包含一行。这一点请牢记。</p><p>第七步：应用cube或者rollup选项，为vt5生成超组，生成vt6.</p><p>第八步：应用having筛选器，生成vt7。having筛选器是第一个也是为唯一一个应用到已分组数据的筛选器。</p><p>第九步：处理select子句。将vt7中的在select中出现的列筛选出来。生成vt8.</p><p>第十步：应用distinct子句，vt8中移除相同的行，生成vt9。事实上如果应用了group by子句那么distinct是多余的，原因同样在于，分组的时候是将列中唯一的值分成一组，同时只为每一组返回一行记录，那么所以的记录都将是不相同的。</p><p>第十一步：应用order by子句。按照order_by_condition排序vt9，此时返回的一个游标，而不是虚拟表。sql是基于集合的理论的，集合不会预先对他的行排序，它只是成员的逻辑集合，成员的顺序是无关紧要的。对表进行排序的查询可以返回一个对象，这个对象包含特定的物理顺序的逻辑组织。这个对象就叫游标。正因为返回值是游标，那么使用order by 子句查询不能应用于表表达式。排序是很需要成本的，除非你必须要排序，否则最好不要指定order by，最后，在这一步中是第一个也是唯一一个可以使用select列表中别名的步骤。</p></blockquote><h3 id="2leetcode-过去30天的用户活动-ii"><a class="markdownIt-Anchor" href="#2leetcode-过去30天的用户活动-ii"></a> 2.leetcode <a href="https://leetcode-cn.com/problems/user-activity-for-the-past-30-days-ii/">过去30天的用户活动 II</a></h3><p>keys:</p><p>datadiff : DATEDIFF(‘2019-07-27’, activity_date) &lt; 30</p><p>ROUND(x, d)： 四舍五入保留 x 的 d 位小数。</p><p>IFNULL(x1, x2) ：如果 x1 为 NULL， 返回 x2。</p><h3 id="3laglead函数"><a class="markdownIt-Anchor" href="#3laglead函数"></a> 3.lag(),lead()函数</h3><p>来自 LAG()和LEAD() <a href="https://blog.csdn.net/weixin_38653290/article/details/85042224">分析函数详解</a></p><p>题目 <a href="https://leetcode-cn.com/problems/rising-temperature/">leektcode</a></p><p>答案：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> Id<br><span class="hljs-keyword">from</span> <br>(<br><span class="hljs-keyword">select</span> <br>temperature,<br>recordDate,<br><span class="hljs-built_in">lead</span>(id,<span class="hljs-number">1</span>) <span class="hljs-keyword">over</span> (<span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> recordDate) <span class="hljs-keyword">as</span> <span class="hljs-string">&#x27;Id&#x27;</span>,<br><span class="hljs-built_in">lead</span>(recordDate,<span class="hljs-number">1</span>) <span class="hljs-keyword">over</span> (<span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> recordDate) <span class="hljs-keyword">as</span> <span class="hljs-string">&#x27;nextDate&#x27;</span>,<br><span class="hljs-built_in">lead</span>(temperature,<span class="hljs-number">1</span>) <span class="hljs-keyword">over</span> (<span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> recordDate) <span class="hljs-keyword">as</span> <span class="hljs-string">&#x27;nextTemp&#x27;</span><br><span class="hljs-keyword">from</span> weather <br>)t <br><span class="hljs-keyword">where</span> nextTemp <span class="hljs-operator">&gt;</span> temperature <span class="hljs-keyword">and</span> DATEDIFF(nextDate, recordDate) <span class="hljs-operator">=</span> <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>Lag和Lead分析函数可以在同一次查询中取出同一字段的前N行的数据(Lag)和后N行的数据(Lead)作为独立的列。</p><p>在实际应用当中，若要用到取今天和昨天的某字段差值时，Lag和Lead函数的应用就显得尤为重要。当然，这种操作可以用表的自连接实现，但是LAG和LEAD与left join、rightjoin等自连接相比，效率更高，SQL更简洁。下面我就对这两个函数做一个简单的介绍。</p><p>函数语法如下：</p><p>lag(exp_str,offset,defval) over(partion by …order by …)</p><p>lead(exp_str,offset,defval) over(partion by …order by …)</p><blockquote><p>Offset是偏移量，即是上1个或上N个的值，假设当前行在表中排在第5行，则offset 为3，则表示我们所要找的数据行就是表中的第2行（即5-3=2）。</p><p>Defval默认值，当两个函数取上N/下N个值，当在表中从当前行位置向前数N行已经超出了表的范围时，lag（）函数将defval这个参数值作为函数的返回值，若没有指定默认值，则返回NULL，那么在数学运算中，总要给一个默认值才不会出错。</p></blockquote><h3 id="4concat-函数"><a class="markdownIt-Anchor" href="#4concat-函数"></a> 4.CONCAT 函数</h3><p>用于将两个字符串链接在一起 如：</p><p>首字母大写，其余字母小写</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">concat(upper(left(<span class="hljs-type">name</span>, <span class="hljs-number">1</span>)), lower(right(<span class="hljs-type">name</span>, length(<span class="hljs-type">name</span>)<span class="hljs-number">-1</span>))) <span class="hljs-keyword">as</span> <span class="hljs-type">name</span><br></code></pre></td></tr></table></figure><h3 id="5union-函数"><a class="markdownIt-Anchor" href="#5union-函数"></a> 5.union 函数</h3><p>UNION 操作符用于合并两个或多个 SELECT 语句的结果集。</p><p>请注意，UNION 内部的每个 SELECT 语句必须拥有相同数量的列。列也必须拥有相似的数据类型。同时，每个 SELECT 语句中的列的顺序必须相同。</p><blockquote><p>默认地，UNION 操作符选取不同的值。如果允许重复的值，请使用 UNION ALL。</p></blockquote><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">select</span> country <span class="hljs-keyword">from</span> websites <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> country <span class="hljs-keyword">from</span> apps;<br><br><span class="hljs-comment">--连接两个表的查询结果集，重复的不显示</span><br><br><span class="hljs-keyword">select</span> country <span class="hljs-keyword">from</span> websites <span class="hljs-keyword">union</span> <span class="hljs-keyword">all</span> <span class="hljs-keyword">select</span> country <span class="hljs-keyword">from</span> apps <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> country;<br><br><span class="hljs-comment">--连接俩个个表的查询结果集，显示重复</span><br><br><span class="hljs-keyword">select</span> country,<span class="hljs-type">name</span> <span class="hljs-keyword">from</span> websites <span class="hljs-keyword">where</span> country = <span class="hljs-string">&#x27;CN&#x27;</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">all</span> <br><br><span class="hljs-keyword">select</span> country,app_name <span class="hljs-keyword">from</span> apps <span class="hljs-keyword">where</span> country=<span class="hljs-string">&#x27;CN&#x27;</span> <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> <span class="hljs-type">name</span>; <br><br><span class="hljs-comment">--通过where条件查询的结果，连接连个表的结果集，并根据名字排序。</span><br></code></pre></td></tr></table></figure><h3 id="6count-over-partition-by-用法"><a class="markdownIt-Anchor" href="#6count-over-partition-by-用法"></a> 6.count(*) over (partition by ……)用法</h3><p>select id,count(*) over(partition by pro_id) from sal;<br />以pro_id分组，统计分组后每个pro_id的记录总数及对应的id；</p><p>类似还有count(*) over(order by ……)、sum(amount) over(partition by ……)等</p>]]></content>
    
    
    <categories>
      
      <category>数据库</category>
      
    </categories>
    
    
    <tags>
      
      <tag>mysql</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>osx-mysql 命令</title>
    <link href="/2021/03/01/osx-mysql-%E5%91%BD%E4%BB%A4/"/>
    <url>/2021/03/01/osx-mysql-%E5%91%BD%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[<h1 id="mysql-osx"><a class="markdownIt-Anchor" href="#mysql-osx"></a> mysql (osx)</h1><a id="more"></a><h2 id="mysql-下载安装"><a class="markdownIt-Anchor" href="#mysql-下载安装"></a> Mysql 下载安装</h2><p><a href="https://dev.mysql.com/downloads/mysql/">mysql下载地址</a></p><p><a href="https://dev.mysql.com/downloads/connector/python/">Mysql-python-connector</a></p><p>Python 安装mysql-connector</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">pip <span class="hljs-keyword">install</span> mysql-connector<br></code></pre></td></tr></table></figure><h2 id="python-mysql-相关文档"><a class="markdownIt-Anchor" href="#python-mysql-相关文档"></a> Python-mysql 相关文档</h2><p><a href="https://pymysql.readthedocs.io/en/latest/">pysql官方文档</a></p><h2 id="数据库操作"><a class="markdownIt-Anchor" href="#数据库操作"></a> 数据库操作：</h2><h3 id="打开数据库"><a class="markdownIt-Anchor" href="#打开数据库"></a> 打开数据库:</h3><p>在终端根文件夹下输入下面命令，如果不是根文件夹输入“cd ~”返回到根文件夹</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">/usr/<span class="hljs-built_in">local</span>/mysql/bin/mysql -u root -p<br></code></pre></td></tr></table></figure><p>密码是加密的，只需要正确输入回车就可以了，输入密码，进入数据库</p><h3 id="2-显示所有数据库"><a class="markdownIt-Anchor" href="#2-显示所有数据库"></a> 2. 显示所有数据库</h3><p>输入show databases;命令，显示所有数据库</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dart">mysql&gt; <span class="hljs-keyword">show</span> databases;<br></code></pre></td></tr></table></figure><h3 id="3创建数据库"><a class="markdownIt-Anchor" href="#3创建数据库"></a> 3.创建数据库</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs undefined">mysql&gt; create database studb;<br></code></pre></td></tr></table></figure><h3 id="4-使用数据库"><a class="markdownIt-Anchor" href="#4-使用数据库"></a> 4. 使用数据库</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">mysql&gt; <span class="hljs-keyword">use</span> <span class="hljs-title">studb</span>;<br></code></pre></td></tr></table></figure><h3 id="5-显示数据库中所有表"><a class="markdownIt-Anchor" href="#5-显示数据库中所有表"></a> 5. 显示数据库中所有表</h3><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dart">mysql&gt; <span class="hljs-keyword">show</span> tables;<br></code></pre></td></tr></table></figure><h3 id="6创建表"><a class="markdownIt-Anchor" href="#6创建表"></a> 6.创建表</h3><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs rust">mysql&gt; create table t_stu<br>    -&gt; (<br>    -&gt; sid varchar(<span class="hljs-number">20</span>) not null primary key,<br>    -&gt; sname varchar(<span class="hljs-number">20</span>) not null,<br>    -&gt; address varchar(<span class="hljs-number">50</span>)<br>    -&gt; );<br></code></pre></td></tr></table></figure><p>创建的表中的值：<br />sid为主键20字节不能为空<br />sname为名字20 字节不能为空<br />address为地址50字节</p><h3 id="6-打印表结构"><a class="markdownIt-Anchor" href="#6-打印表结构"></a> 6. 打印表结构：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs undefined">mysql&gt; desc t_stu;<br></code></pre></td></tr></table></figure><p>打印结果：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs ruby">+---------+-------------+------+-----+---------+-------+<br><span class="hljs-params">| Field   |</span> Type        <span class="hljs-params">| Null |</span> Key <span class="hljs-params">| Default |</span> Extra <span class="hljs-params">|</span><br><span class="hljs-params">+---------+-------------+------+-----+---------+-------+</span><br><span class="hljs-params">|</span> sid     <span class="hljs-params">| varchar(20) |</span> NO   <span class="hljs-params">| PRI |</span> NULL    <span class="hljs-params">|       |</span><br><span class="hljs-params">| sname   |</span> varchar(<span class="hljs-number">20</span>) <span class="hljs-params">| NO   |</span>     <span class="hljs-params">| NULL    |</span>       <span class="hljs-params">|</span><br><span class="hljs-params">|</span> address <span class="hljs-params">| varchar(50) |</span> YES  <span class="hljs-params">|     |</span> NULL    <span class="hljs-params">|       |</span><br>+---------+-------------+------+-----+---------+-------+<br><span class="hljs-number">3</span> rows <span class="hljs-keyword">in</span> set (<span class="hljs-number">0.02</span> sec)<br></code></pre></td></tr></table></figure><h3 id="7-表中增加数据"><a class="markdownIt-Anchor" href="#7-表中增加数据"></a> 7. 表中增加数据：</h3><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs rust">mysql&gt; insert into t_stu<br>    -&gt; select <span class="hljs-symbol">&#x27;s001</span>&#x27; , <span class="hljs-symbol">&#x27;jin</span>&#x27; , <span class="hljs-symbol">&#x27;changzhou</span>&#x27;<br>    -&gt; <span class="hljs-class"><span class="hljs-keyword">union</span></span><br><span class="hljs-class">    -&gt; <span class="hljs-title">select</span></span> <span class="hljs-symbol">&#x27;s002</span>&#x27; , <span class="hljs-symbol">&#x27;tom</span>&#x27; , <span class="hljs-symbol">&#x27;yangzhou</span>&#x27;<br>    -&gt; <span class="hljs-class"><span class="hljs-keyword">union</span></span><br><span class="hljs-class">    -&gt; <span class="hljs-title">select</span></span> <span class="hljs-symbol">&#x27;s003</span>&#x27; , <span class="hljs-symbol">&#x27;kate</span>&#x27; , <span class="hljs-symbol">&#x27;suzhou</span>&#x27;<br>    -&gt; ;<br></code></pre></td></tr></table></figure><h3 id="8-查看表数据"><a class="markdownIt-Anchor" href="#8-查看表数据"></a> 8. 查看表数据：</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs csharp">mysql&gt; <span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> t_stu;<br></code></pre></td></tr></table></figure><p>查看结果：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-params">| sid  |</span> sname <span class="hljs-params">| address  |</span><br>+------+-------+----------+<br><span class="hljs-params">| s001 |</span> jin   <span class="hljs-params">| wuhan    |</span><br><span class="hljs-params">| s002 |</span> tom   <span class="hljs-params">| shanghai |</span><br><span class="hljs-params">| s003 |</span> kate  <span class="hljs-params">| suzhou   |</span><br>+------+-------+----------+<br><span class="hljs-number">3</span> rows <span class="hljs-keyword">in</span> set (<span class="hljs-number">0.01</span> sec)<br></code></pre></td></tr></table></figure><h3 id="9-修改表中数据"><a class="markdownIt-Anchor" href="#9-修改表中数据"></a> 9. 修改表中数据：</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">mysql&gt; update t_stu <span class="hljs-built_in">set</span> sname = <span class="hljs-string">&quot;fby&quot;</span> <span class="hljs-built_in">where</span> sid = <span class="hljs-string">&quot;s001&quot;</span>;<br></code></pre></td></tr></table></figure><p>更新成功之后，查看更新后的数据</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs csharp">mysql&gt; <span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> t_stu <span class="hljs-keyword">where</span> sid = <span class="hljs-string">&quot;s001&quot;</span>;<br></code></pre></td></tr></table></figure><p>查询结果：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs ruby">+------+-------+---------+<br><span class="hljs-params">| sid  |</span> sname <span class="hljs-params">| address |</span><br>+------+-------+---------+<br><span class="hljs-params">| s001 |</span> fby   <span class="hljs-params">| wuhan   |</span><br>+------+-------+---------+<br><span class="hljs-number">1</span> row <span class="hljs-keyword">in</span> set (<span class="hljs-number">0.00</span> sec)<br></code></pre></td></tr></table></figure><h3 id="10-删除表中数据"><a class="markdownIt-Anchor" href="#10-删除表中数据"></a> 10. 删除表中数据</h3><p>删除表中sid = “s002”的数据</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs csharp">mysql&gt; delete <span class="hljs-keyword">from</span> t_stu <span class="hljs-keyword">where</span> sid = <span class="hljs-string">&quot;s002&quot;</span>;<br></code></pre></td></tr></table></figure><h2 id="qa-osx上使用sql遇到的问题"><a class="markdownIt-Anchor" href="#qa-osx上使用sql遇到的问题"></a> Q&amp;A （osx上使用sql遇到的问题）</h2><h3 id="1恢复数据库时如何访问data文件夹"><a class="markdownIt-Anchor" href="#1恢复数据库时如何访问data文件夹"></a> 1.恢复数据库时如何访问data文件夹？</h3><p>A：恢复数据</p><ul><li>连接上MySQL后，创建一个数据库，访问MySQL安装目录下的<code>data</code>文件夹。</li><li>Mac上默认是没有读写权限的，需要修改<ul><li>data文件夹上右键”getInfo”，在最下方设置访问权限为可读写</li><li>终端：<code>sudo chmod +x /usr/local/mysql/data</code></li></ul></li><li>将需要恢复的数据放到<code>MySQL安装路径/data/数据库名字/</code>下</li><li>结束</li></ul><p>备注：恢复完毕后可以把文件夹权限修改回来，以防将来没地方哭</p><h3 id="2mysql可视化工具有哪些"><a class="markdownIt-Anchor" href="#2mysql可视化工具有哪些"></a> 2.mysql可视化工具有哪些？</h3><p>A：</p><p>Sequel <a href="https://sequelpro.com/">Pro</a></p><p><img src="https://tableplus.com/resources/favicons/apple-icon.png" alt="img" style="zoom:25%;" /><a href="https://tableplus.com/">TablePlus</a></p>]]></content>
    
    
    <categories>
      
      <category>数据库</category>
      
    </categories>
    
    
    <tags>
      
      <tag>mysql</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>scrapy 从其他脚本运行两次以上</title>
    <link href="/2021/02/27/scrapy-%E4%BB%8E%E5%85%B6%E4%BB%96%E8%84%9A%E6%9C%AC%E8%BF%90%E8%A1%8C%E4%B8%A4%E6%AC%A1%E4%BB%A5%E4%B8%8A/"/>
    <url>/2021/02/27/scrapy-%E4%BB%8E%E5%85%B6%E4%BB%96%E8%84%9A%E6%9C%AC%E8%BF%90%E8%A1%8C%E4%B8%A4%E6%AC%A1%E4%BB%A5%E4%B8%8A/</url>
    
    <content type="html"><![CDATA[<h1 id="scrapy-从其他脚本运行两次以上"><a class="markdownIt-Anchor" href="#scrapy-从其他脚本运行两次以上"></a> scrapy 从其他脚本运行两次以上</h1><p>**Key word: **</p><p><strong>ReactorNotRestartable（）twisted.internet.error.ReactorNotRestartable</strong></p><a id="more"></a><h2 id="问题原因"><a class="markdownIt-Anchor" href="#问题原因"></a> 问题原因</h2><p>多次调用Reactor，但这不起作用，因为每个进程只有一个反应器，不能<a href="https://stackoverflow.com/questions/18910912/reactornotrestartable-when-launching-two-equivalent-unittest-with-twisted-and-tr">start it twice</a>。</p><h2 id="解决办法"><a class="markdownIt-Anchor" href="#解决办法"></a> 解决办法</h2><p>有两种解决问题的方法，都在<a href="http://doc.scrapy.org/en/latest/topics/practices.html#running-multiple-spiders-in-the-same-process">（官方文档）</a>中描述。</p><p>较简单的做法是使用<code>CrawlerProcess</code>并简单地调用<code>crawler_process.start()</code>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> scrapy.crawler <span class="hljs-keyword">import</span> CrawlerProcess<br><span class="hljs-keyword">from</span> dirbot.spiders.dmoz <span class="hljs-keyword">import</span> DmozSpider<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">search</span>(<span class="hljs-params">runner, keyword</span>):</span><br>    <span class="hljs-keyword">return</span> runner.crawl(DmozSpider, keyword)<br><br>runner = CrawlerProcess()<br>search(runner, <span class="hljs-string">&quot;123&quot;</span>)<br>search(runner, <span class="hljs-string">&quot;456&quot;</span>)<br>runner.start()<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>scrape</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>numpy基本使用</title>
    <link href="/2021/02/26/numpy%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/"/>
    <url>/2021/02/26/numpy%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="numpy基本使用"><a class="markdownIt-Anchor" href="#numpy基本使用"></a> numpy基本使用</h1><p><a href="https://numpy.org/doc/stable/reference/index.html">Numpy api reference</a></p><a id="more"></a><h2 id="numpy数据类型"><a class="markdownIt-Anchor" href="#numpy数据类型"></a> numpy数据类型</h2><h3 id="数据结构"><a class="markdownIt-Anchor" href="#数据结构"></a> 数据结构</h3><ul><li>一个指向数据（内存或内存映射文件中的一块数据）的指针。</li><li>数据类型或 dtype，描述在数组中的固定大小值的格子。</li><li>一个表示数组形状（shape）的元组，表示各维度大小的元组。</li><li>一个跨度元组（stride），其中的整数指的是为了前进到当前维度下一个元素需要&quot;跨过&quot;的字节数。</li></ul><h3 id="常见数据类型"><a class="markdownIt-Anchor" href="#常见数据类型"></a> 常见数据类型</h3><table><thead><tr><th>bool_</th><th style="text-align:center">布尔型数据类型（True 或者 False）</th></tr></thead><tbody><tr><td>int_</td><td style="text-align:center">默认的整数类型（类似于 C 语言中的 long，int32 或 int64）</td></tr><tr><td>intc</td><td style="text-align:center">与 C 的 int 类型一样，一般是 int32 或 int 64</td></tr><tr><td>intp</td><td style="text-align:center">用于索引的整数类型（类似于 C 的 ssize_t，一般情况下仍然是 int32 或 int64）</td></tr><tr><td>int8</td><td style="text-align:center">字节（-128 to 127）</td></tr><tr><td>int16</td><td style="text-align:center">整数（-32768 to 32767）</td></tr><tr><td>int32</td><td style="text-align:center">整数（-2147483648 to 2147483647）</td></tr><tr><td>int64</td><td style="text-align:center">整数（-9223372036854775808 to 9223372036854775807）</td></tr><tr><td>uint8</td><td style="text-align:center">无符号整数（0 to 255）</td></tr><tr><td>uint16</td><td style="text-align:center">无符号整数（0 to 65535）</td></tr><tr><td>uint32</td><td style="text-align:center">无符号整数（0 to 4294967295）</td></tr><tr><td>uint64</td><td style="text-align:center">无符号整数（0 to 18446744073709551615）</td></tr><tr><td>float_</td><td style="text-align:center">float64 类型的简写</td></tr><tr><td>float16</td><td style="text-align:center">半精度浮点数，包括：1 个符号位，5 个指数位，10 个尾数位</td></tr><tr><td>float32</td><td style="text-align:center">单精度浮点数，包括：1 个符号位，8 个指数位，23 个尾数位</td></tr><tr><td>float64</td><td style="text-align:center">双精度浮点数，包括：1 个符号位，11 个指数位，52 个尾数位</td></tr><tr><td>complex_</td><td style="text-align:center">complex128 类型的简写，即 128 位复数</td></tr><tr><td>complex64</td><td style="text-align:center">复数，表示双 32 位浮点数（实数部分和虚数部分）</td></tr><tr><td>complex128</td><td style="text-align:center">复数，表示双 64 位浮点数（实数部分和虚数部分）</td></tr></tbody></table><h2 id="创建ndarray数组对象"><a class="markdownIt-Anchor" href="#创建ndarray数组对象"></a> 创建NDarray数组对象</h2><h3 id="说明"><a class="markdownIt-Anchor" href="#说明"></a> 说明</h3><p>NumPy 数组的维数称为秩（rank），秩就是轴的数量，即数组的维度，一维数组的秩为 1，二维数组的秩为 2，以此类推。</p><p>在 NumPy中，每一个线性的数组称为是一个轴（axis），也就是维度（dimensions）。比如说，二维数组相当于是两个一维数组，其中第一个一维数组中每个元素又是一个一维数组。所以一维数组就是 NumPy 中的轴（axis），第一个轴相当于是底层数组，第二个轴是底层数组里的数组。而轴的数量——秩，就是数组的维数。</p><p>很多时候可以声明 axis。axis=0，表示沿着第 0 轴进行操作，即对每一列进行操作；axis=1，表示沿着第1轴进行操作，即对每一行进行操作。</p><p>NumPy 的数组中比较重要 ndarray 对象属性有：</p><table><thead><tr><th style="text-align:left">属性</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:left">ndarray.ndim</td><td style="text-align:left">秩，即轴的数量或维度的数量</td></tr><tr><td style="text-align:left">ndarray.shape</td><td style="text-align:left">数组的维度，对于矩阵，n 行 m 列</td></tr><tr><td style="text-align:left">ndarray.size</td><td style="text-align:left">数组元素的总个数，相当于 .shape 中 n*m 的值</td></tr><tr><td style="text-align:left">ndarray.dtype</td><td style="text-align:left">ndarray 对象的元素类型</td></tr><tr><td style="text-align:left">ndarray.itemsize</td><td style="text-align:left">ndarray 对象中每个元素的大小，以字节为单位</td></tr><tr><td style="text-align:left">ndarray.flags</td><td style="text-align:left">ndarray 对象的内存信息</td></tr><tr><td style="text-align:left">ndarray.real</td><td style="text-align:left">ndarray元素的实部</td></tr><tr><td style="text-align:left">ndarray.imag</td><td style="text-align:left">ndarray 元素的虚部</td></tr><tr><td style="text-align:left">ndarray.data</td><td style="text-align:left">包含实际数组元素的缓冲区，由于一般通过数组的索引获取元素，所以通常不需要使用这个属性。</td></tr></tbody></table><h3 id="array"><a class="markdownIt-Anchor" href="#array"></a> array()</h3><p>创建数组</p><p>参数：shape，dtype，buffer，offset，strides，order</p><p><a href="https://numpy.org/doc/stable/reference/generated/numpy.ndarray.html?highlight=ndarray%20array#numpy.ndarray">详情</a></p><h3 id="asarray"><a class="markdownIt-Anchor" href="#asarray"></a> asarray()</h3><p>将输入转化为数组</p><p><a href="https://numpy.org/doc/stable/reference/generated/numpy.asarray.html?highlight=ndarray%20asarray">详情</a></p><h3 id="empty"><a class="markdownIt-Anchor" href="#empty"></a> empty()</h3><p>创建一个数组，但保持其分配的内存不变(即，它包含“垃圾”)。</p><h3 id="zeros"><a class="markdownIt-Anchor" href="#zeros"></a> zeros()</h3><p>创建一个数组，其中每个元素都为零。</p><h3 id="ones"><a class="markdownIt-Anchor" href="#ones"></a> ones()</h3><p>创建一个数组，其中每个元素都为一。</p><h3 id="full"><a class="markdownIt-Anchor" href="#full"></a> full()</h3><p>返回一个给定形状和类型的新数组，并填充 fill _ value。</p><p><a href="https://numpy.org/doc/stable/reference/generated/numpy.full.html?highlight=full#numpy.full">详情</a></p><h3 id="eye"><a class="markdownIt-Anchor" href="#eye"></a> eye()</h3><p>返回一个2-D 数组，对角线上有1，其他地方有0。</p><p><a href="https://numpy.org/doc/stable/reference/generated/numpy.eye.html?highlight=eye#numpy.eye">详情</a></p><h3 id="arange"><a class="markdownIt-Anchor" href="#arange"></a> arange()</h3><p>在给定的间隔内返回均匀间隔的值。</p><p>值在半开区间[开始，停止]内生成(换句话说，包括开始但不包括停止的区间)。对于整数参数，该函数等效于 Python 内置的 range 函数，但返回一个 ndarray 而不是一个列表。</p><p>当使用非整数步骤(如0.1)时，结果通常不一致。对于这些情况，最好使用 numpy.linspace。</p><p><a href="https://numpy.org/doc/stable/reference/generated/numpy.arange.html?highlight=arange#numpy.arange">详情</a></p><h3 id="fromiter"><a class="markdownIt-Anchor" href="#fromiter"></a> fromiter()</h3><p>从可迭代对象创建一个新的一维数组。</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs maxima">iterable = (x*x <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">5</span>))<br><span class="hljs-built_in">np</span>.fromiter(iterable, <span class="hljs-built_in">float</span>)<br>&gt;&gt;&gt;<span class="hljs-built_in">array</span>([  <span class="hljs-number">0</span>.,   <span class="hljs-number">1</span>.,   <span class="hljs-number">4</span>.,   <span class="hljs-number">9</span>.,  <span class="hljs-number">16</span>.])<br></code></pre></td></tr></table></figure><p><a href="https://numpy.org/doc/stable/reference/generated/numpy.fromiter.html?highlight=fromiter#numpy.fromiter">详情</a></p><h3 id="linspace"><a class="markdownIt-Anchor" href="#linspace"></a> linspace()</h3><p>在指定的间隔内返回均匀间隔的数字。</p><p>返回按间隔[开始，停止]计算的 num 均匀间隔的样本。</p><p>可以选择排除间隔的终结点。</p><blockquote><p>在版本1.16.0中更改: 现在支持非标量启动和停止。</p></blockquote><blockquote><p>在版本1.20.0中更改: 当指定整数 dtype 时，值被舍入为-inf，而不是0。旧的行为仍然可以通过 np.linspace (start、 stop、 num)获得。Astype (int)</p></blockquote><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs routeros">np.linspace(2.0, 3.0, <span class="hljs-attribute">num</span>=5)<br>&gt;&gt;&gt;array([2.  , 2.25, 2.5 , 2.75, 3.  ])<br>np.linspace(2.0, 3.0, <span class="hljs-attribute">num</span>=5, <span class="hljs-attribute">endpoint</span>=<span class="hljs-literal">False</span>)<br>&gt;&gt;&gt;array([2. ,  2.2,  2.4,  2.6,  2.8])<br>np.linspace(2.0, 3.0, <span class="hljs-attribute">num</span>=5, <span class="hljs-attribute">retstep</span>=<span class="hljs-literal">True</span>)<br>&gt;&gt;&gt;(array([2.  ,  2.25,  2.5 ,  2.75,  3.  ]), 0.25)<br></code></pre></td></tr></table></figure><p><a href="https://numpy.org/doc/stable/reference/generated/numpy.linspace.html?highlight=linspace#numpy.linspace">详情</a></p><h3 id="logspace"><a class="markdownIt-Anchor" href="#logspace"></a> logspace()</h3><p>返回在对数刻度上均匀间隔的数字。</p><p>在线性空间中，序列从 base * * start 开始(base to the power of start) ，以 base * * stop 结束(参见下面的端点)。</p><blockquote><p>在版本1.16.0中更改: 现在支持非标量启动和停止。</p></blockquote><p><a href="https://numpy.org/doc/stable/reference/generated/numpy.logspace.html?highlight=logspace#numpy.logspace">详情</a></p><h3 id="randomrandom"><a class="markdownIt-Anchor" href="#randomrandom"></a> random.random()</h3><p>返回半开区间内的随机浮动值[0.0,1.0]。为<strong>random_sample</strong>的别名，以方便前向移植到新的随机 API。</p><h3 id="randomrandint"><a class="markdownIt-Anchor" href="#randomrandint"></a> random.randint()</h3><p>从低(包含)到高(排他)返回随机<strong>整数</strong>。</p><p><a href="https://numpy.org/doc/stable/reference/random/generated/numpy.random.randint.html?highlight=random%20randint#numpy.random.randint">详情</a></p><h3 id="randomrandn"><a class="markdownIt-Anchor" href="#randomrandn"></a> random.randn()</h3><p>从“标准正态”分布中返回一个样本(或个样本)。</p><p><a href="https://numpy.org/doc/stable/reference/random/generated/numpy.random.randn.html?highlight=random%20randn#numpy.random.randn">详情</a></p><h3 id="randomnormal"><a class="markdownIt-Anchor" href="#randomnormal"></a> random.normal()</h3><p>从正态(高斯)分布中随机抽取样本。</p><blockquote><p>正态分布在自然界中经常发生。例如，它描述了受大量微小的随机扰动影响的样本的常见分布，每个样本都有其独特的分布[2]。</p></blockquote><p><a href="https://numpy.org/doc/stable/reference/random/generated/numpy.random.normal.html?highlight=random%20normal#numpy.random.normal">详情</a></p><h2 id="numpy数组与python中列表的对比"><a class="markdownIt-Anchor" href="#numpy数组与python中列表的对比"></a> numpy数组与python中列表的对比</h2><h2 id="ndarray数组的属性"><a class="markdownIt-Anchor" href="#ndarray数组的属性"></a> Ndarray数组的属性</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br></code></pre></td></tr></table></figure><h3 id="ndim"><a class="markdownIt-Anchor" href="#ndim"></a> ndim</h3><p>ndarray.ndim 用于返回数组的维数，等于秩。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">a = np.arange(<span class="hljs-number">24</span>)  <br><span class="hljs-built_in">print</span> (a.ndim)   <br><br>&gt;&gt;&gt;<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><h3 id="shape"><a class="markdownIt-Anchor" href="#shape"></a> shape</h3><p>ndarray.shape 表示数组的维度，返回一个元组，这个元组的长度就是维度的数目，即 ndim 属性(秩)。比如，一个二维数组，其维度表示&quot;行数&quot;和&quot;列数&quot;。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">a = np.array([[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>],[<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>]])  <br><span class="hljs-built_in">print</span> (a.shape)<br><br><span class="hljs-meta">&gt;&gt;&gt; </span>(<span class="hljs-number">2</span>, <span class="hljs-number">3</span>)<br></code></pre></td></tr></table></figure><h3 id="reshape"><a class="markdownIt-Anchor" href="#reshape"></a> reshape</h3><p>ndarray.reshape 函数来调整数组大小。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">a = np.array([[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>],[<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>]]) <br>b = a.reshape(<span class="hljs-number">3</span>,<span class="hljs-number">2</span>)  <br><span class="hljs-built_in">print</span> (b)<br><br>&gt;&gt;&gt;[[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>] <br>   [<span class="hljs-number">3</span>, <span class="hljs-number">4</span>] <br>   [<span class="hljs-number">5</span>, <span class="hljs-number">6</span>]]<br></code></pre></td></tr></table></figure><blockquote><p>ndarray.reshape 通常返回的是非拷贝副本，即改变返回后数组的元素，原数组对应元素的值也会改变。</p></blockquote><h3 id="size"><a class="markdownIt-Anchor" href="#size"></a> size</h3><p>ndarray.size用于表示数组中的元素数，也等于np.prod(a.shape),即数组维数的乘积</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs llvm"><span class="hljs-keyword">x</span> <span class="hljs-operator">=</span> np.zeros((<span class="hljs-number">3</span><span class="hljs-punctuation">,</span> <span class="hljs-number">5</span><span class="hljs-punctuation">,</span> <span class="hljs-number">2</span>)<span class="hljs-punctuation">,</span> dtype<span class="hljs-operator">=</span>np.complex<span class="hljs-number">128</span>)<br><span class="hljs-keyword">x</span>.size<br>&gt;&gt;&gt;<span class="hljs-number">30</span><br>np.prod(<span class="hljs-keyword">x</span>.shape)<br>&gt;&gt;&gt;<span class="hljs-number">30</span><br></code></pre></td></tr></table></figure><h3 id="dtype"><a class="markdownIt-Anchor" href="#dtype"></a> dtype</h3><p>ndarray.dtype 用于表示元素的数据类型</p><h3 id="itemsize"><a class="markdownIt-Anchor" href="#itemsize"></a> itemsize</h3><p>ndarray.itemsize 以字节的形式返回数组中每一个元素的大小。</p><p>例如，一个元素类型为 float64 的数组 itemsize 属性值为 8(float64 占用 64 个 bits，每个字节长度为 8，所以 64/8，占用 8 个字节），又如，一个元素类型为 complex32 的数组 item 属性为 4（32/8）。</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs maxima">x = <span class="hljs-built_in">np</span>.<span class="hljs-built_in">array</span>([<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>], dtype = <span class="hljs-built_in">np</span>.int8)  <br><span class="hljs-built_in">print</span> (x.itemsize)<br><br>&gt;&gt;&gt;<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><h3 id="flags"><a class="markdownIt-Anchor" href="#flags"></a> Flags</h3><p>ndarray.flags 返回 ndarray 对象的内存信息，包含以下属性：</p><table><thead><tr><th style="text-align:left">属性</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left">C_CONTIGUOUS ©</td><td style="text-align:left">数据是在一个单一的C风格的连续段中</td></tr><tr><td style="text-align:left">F_CONTIGUOUS (F)</td><td style="text-align:left">数据是在一个单一的Fortran风格的连续段中</td></tr><tr><td style="text-align:left">OWNDATA (O)</td><td style="text-align:left">数组拥有它所使用的内存或从另一个对象中借用它</td></tr><tr><td style="text-align:left">WRITEABLE (W)</td><td style="text-align:left">数据区域可以被写入，将该值设置为 False，则数据为只读</td></tr><tr><td style="text-align:left">ALIGNED (A)</td><td style="text-align:left">数据和所有元素都适当地对齐到硬件上</td></tr><tr><td style="text-align:left">UPDATEIFCOPY (U)</td><td style="text-align:left">这个数组是其它数组的一个副本，当这个数组被释放时，原数组的内容将被更新</td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>numpy</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>初识numpy</title>
    <link href="/2021/02/26/%E5%88%9D%E8%AF%86numpy/"/>
    <url>/2021/02/26/%E5%88%9D%E8%AF%86numpy/</url>
    
    <content type="html"><![CDATA[<h1 id="初识numpy"><a class="markdownIt-Anchor" href="#初识numpy"></a> 初识numpy</h1><a id="more"></a><h2 id="numpy简介"><a class="markdownIt-Anchor" href="#numpy简介"></a> numpy简介</h2><h3 id="简介"><a class="markdownIt-Anchor" href="#简介"></a> 简介</h3><p><strong>NumPy</strong>是Python中科学计算的基础包。 它是一个Python库。</p><h3 id="作用"><a class="markdownIt-Anchor" href="#作用"></a> 作用</h3><p>提供多维数组对象，各种派生对象（如掩码数组和矩阵），以及用于数组快速操作的各种API，有包括数学、逻辑、形状操作、排序、选择、输入输出、离散傅立叶变换、基本线性代数，基本统计运算和随机模拟等等。 <strong>NumPy</strong>包的核心是ndarray 对象</p><h3 id="包含"><a class="markdownIt-Anchor" href="#包含"></a> 包含</h3><ul><li>一个强大的N维数组对象 ndarray</li><li>广播功能函数</li><li>整合 C/C++/Fortran 代码的工具</li><li>线性代数、傅里叶变换、随机数生成等功能</li></ul><h3 id="应用"><a class="markdownIt-Anchor" href="#应用"></a> 应用</h3><p>NumPy 通常与 SciPy（Scientific Python）和 Matplotlib（绘图库）一起使用， 这种组合广泛用于替代 MatLab，是一个强大的科学计算环境，有助于我们通过 Python 学习数据科学或者机器学习。</p><h3 id="scipy"><a class="markdownIt-Anchor" href="#scipy"></a> SciPy</h3><p>SciPy 是一个开源的 Python 算法库和数学工具包。</p><p>SciPy 包含的模块有最优化、线性代数、积分、插值、特殊函数、快速傅里叶变换、信号处理和图像处理、常微分方程求解和其他科学与工程中常用的计算。</p><h3 id="matplotlib"><a class="markdownIt-Anchor" href="#matplotlib"></a> Matplotlib</h3><p>Matplotlib 是 Python 编程语言及其数值数学扩展包 NumPy 的可视化操作界面。它为利用通用的图形用户界面工具包，如 Tkinter, wxPython, Qt 或 GTK+ 向应用程序嵌入式绘图提供了应用程序接口（API）。</p><h3 id="安装"><a class="markdownIt-Anchor" href="#安装"></a> 安装</h3><p>需要python开发环境</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs py">pip install numpy<br></code></pre></td></tr></table></figure><h2 id="ndarray对象简介"><a class="markdownIt-Anchor" href="#ndarray对象简介"></a> Ndarray对象简介</h2><h3 id="介绍"><a class="markdownIt-Anchor" href="#介绍"></a> 介绍</h3><p>NumPy 最重要的一个特点是其 N 维数组对象 ndarray，它是一系列同类型数据的集合，以 0 下标为开始进行集合中元素的索引。</p><p>ndarray 对象是用于存放同类型元素的多维数组。</p><p>ndarray 中的每个元素在内存中都有相同存储大小的区域。</p><h3 id="组成"><a class="markdownIt-Anchor" href="#组成"></a> 组成</h3><ul><li>一个指向数据（内存或内存映射文件中的一块数据）的指针。</li><li>数据类型或 dtype，描述在数组中的固定大小值的格子。</li><li>一个表示数组形状（shape）的元组，表示各维度大小的元组。</li><li>一个跨度元组（stride），其中的整数指的是为了前进到当前维度下一个元素需要&quot;跨过&quot;的字节数。</li></ul>]]></content>
    
    
    <categories>
      
      <category>python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>numpy</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>pandas 分盒错误</title>
    <link href="/2021/02/21/pandas-%E5%88%86%E7%9B%92%E9%94%99%E8%AF%AF/"/>
    <url>/2021/02/21/pandas-%E5%88%86%E7%9B%92%E9%94%99%E8%AF%AF/</url>
    
    <content type="html"><![CDATA[<h1 id="错误must-have-equal-len-keys-and-value-when-setting-with-an-iterable"><a class="markdownIt-Anchor" href="#错误must-have-equal-len-keys-and-value-when-setting-with-an-iterable"></a> 错误：Must have equal len keys and value when setting with an iterable</h1><a id="more"></a><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">for</span> dataset <span class="hljs-keyword">in</span> train_test_data:<br>    dataset.loc[ dataset[<span class="hljs-string">&#x27;Age&#x27;</span>] &lt;= <span class="hljs-number">16</span>, <span class="hljs-string">&#x27;Age&#x27;</span>] = <span class="hljs-number">0</span>,<br>    dataset.loc[(dataset[<span class="hljs-string">&#x27;Age&#x27;</span>] &gt; <span class="hljs-number">16</span>) &amp; (dataset[<span class="hljs-string">&#x27;Age&#x27;</span>] &lt;= <span class="hljs-number">26</span>), <span class="hljs-string">&#x27;Age&#x27;</span>] = <span class="hljs-number">1</span>,<br>    dataset.loc[(dataset[<span class="hljs-string">&#x27;Age&#x27;</span>] &gt; <span class="hljs-number">26</span>) &amp; (dataset[<span class="hljs-string">&#x27;Age&#x27;</span>] &lt;= <span class="hljs-number">36</span>), <span class="hljs-string">&#x27;Age&#x27;</span>] = <span class="hljs-number">2</span>,<br>    dataset.loc[(dataset[<span class="hljs-string">&#x27;Age&#x27;</span>] &gt; <span class="hljs-number">36</span>) &amp; (dataset[<span class="hljs-string">&#x27;Age&#x27;</span>] &lt;= <span class="hljs-number">62</span>), <span class="hljs-string">&#x27;Age&#x27;</span>] = <span class="hljs-number">3</span>,<br>    dataset.loc[ dataset[<span class="hljs-string">&#x27;Age&#x27;</span>] &gt; <span class="hljs-number">62</span>, <span class="hljs-string">&#x27;Age&#x27;</span>] = <span class="hljs-number">4</span>,<br></code></pre></td></tr></table></figure><p>报错：Must have equal len keys and value when setting with an iterable</p><p>分析：传入数据维度出现问题</p><p>解决：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">for</span> dataset <span class="hljs-keyword">in</span> train_test_data:<br>    dataset.loc[ dataset[<span class="hljs-string">&#x27;Age&#x27;</span>] &lt;= <span class="hljs-number">16</span>, <span class="hljs-string">&#x27;Age&#x27;</span>] = [<span class="hljs-number">0</span>],<br>    dataset.loc[(dataset[<span class="hljs-string">&#x27;Age&#x27;</span>] &gt; <span class="hljs-number">16</span>) &amp; (dataset[<span class="hljs-string">&#x27;Age&#x27;</span>] &lt;= <span class="hljs-number">26</span>), <span class="hljs-string">&#x27;Age&#x27;</span>] = [<span class="hljs-number">1</span>],<br>    dataset.loc[(dataset[<span class="hljs-string">&#x27;Age&#x27;</span>] &gt; <span class="hljs-number">26</span>) &amp; (dataset[<span class="hljs-string">&#x27;Age&#x27;</span>] &lt;= <span class="hljs-number">36</span>), <span class="hljs-string">&#x27;Age&#x27;</span>] = [<span class="hljs-number">2</span>],<br>    dataset.loc[(dataset[<span class="hljs-string">&#x27;Age&#x27;</span>] &gt; <span class="hljs-number">36</span>) &amp; (dataset[<span class="hljs-string">&#x27;Age&#x27;</span>] &lt;= <span class="hljs-number">62</span>), <span class="hljs-string">&#x27;Age&#x27;</span>] = [<span class="hljs-number">3</span>],<br>    dataset.loc[ dataset[<span class="hljs-string">&#x27;Age&#x27;</span>] &gt; <span class="hljs-number">62</span>, <span class="hljs-string">&#x27;Age&#x27;</span>] = [<span class="hljs-number">4</span>],<br></code></pre></td></tr></table></figure><p>其他方法比较稳定</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#年龄分类 child: 0 young: 1 adult: 2 mid-age: 3 senior: 4  </span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">change_age</span>(<span class="hljs-params">age</span>):</span><br>    <span class="hljs-keyword">if</span> age &lt;= <span class="hljs-number">16</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br>    <span class="hljs-keyword">elif</span> age &gt;<span class="hljs-number">16</span> <span class="hljs-keyword">and</span> age &lt;=<span class="hljs-number">26</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span><br>    <span class="hljs-keyword">elif</span> age &gt;<span class="hljs-number">26</span> <span class="hljs-keyword">and</span> age &lt;=<span class="hljs-number">36</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">2</span><br>    <span class="hljs-keyword">elif</span> age &gt;<span class="hljs-number">36</span> <span class="hljs-keyword">and</span> age &lt;=<span class="hljs-number">62</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">3</span><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">4</span><br>    <br>train_new[<span class="hljs-string">&quot;Age&quot;</span>] = train_new[<span class="hljs-string">&quot;Age&quot;</span>].apply(<span class="hljs-keyword">lambda</span> x:change_age(x))<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>pandas</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>模型评估方法</title>
    <link href="/2021/02/20/%E6%A8%A1%E5%9E%8B%E8%AF%84%E4%BC%B0%E6%96%B9%E6%B3%95/"/>
    <url>/2021/02/20/%E6%A8%A1%E5%9E%8B%E8%AF%84%E4%BC%B0%E6%96%B9%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h1 id="模型评估方法"><a class="markdownIt-Anchor" href="#模型评估方法"></a> 模型评估方法</h1><a id="more"></a><h2 id="准备"><a class="markdownIt-Anchor" href="#准备"></a> 准备</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-comment">#数据展示</span><br>%matplotlib inline<br><span class="hljs-keyword">import</span> matplotlib<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><br><span class="hljs-comment">#训练模型中 max_iter 参数过小警告,只为提高运行速度，实际操作中应提高。</span><br><span class="hljs-keyword">import</span> warnings<br>warnings.filterwarnings(<span class="hljs-string">&#x27;ignore&#x27;</span>)<br><br></code></pre></td></tr></table></figure><h2 id="数据集读取"><a class="markdownIt-Anchor" href="#数据集读取"></a> 数据集读取</h2><ul><li>Mnist数据是图像数据：(28,28,1)的灰度图</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> sklearn.datasets <span class="hljs-keyword">import</span> fetch_openml<br>mnist =  fetch_openml(<span class="hljs-string">&#x27;mnist_784&#x27;</span>)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">X, y = mnist[<span class="hljs-string">&quot;data&quot;</span>], mnist[<span class="hljs-string">&quot;target&quot;</span>]<br></code></pre></td></tr></table></figure><p>看下数据样子</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">X.head(),y.head()<br></code></pre></td></tr></table></figure><pre><code>(   pixel1  pixel2  pixel3  pixel4  pixel5  pixel6  pixel7  pixel8  pixel9  \ 0     0.0     0.0     0.0     0.0     0.0     0.0     0.0     0.0     0.0    1     0.0     0.0     0.0     0.0     0.0     0.0     0.0     0.0     0.0    2     0.0     0.0     0.0     0.0     0.0     0.0     0.0     0.0     0.0    3     0.0     0.0     0.0     0.0     0.0     0.0     0.0     0.0     0.0    4     0.0     0.0     0.0     0.0     0.0     0.0     0.0     0.0     0.0        pixel10  ...  pixel775  pixel776  pixel777  pixel778  pixel779  pixel780  \ 0      0.0  ...       0.0       0.0       0.0       0.0       0.0       0.0    1      0.0  ...       0.0       0.0       0.0       0.0       0.0       0.0    2      0.0  ...       0.0       0.0       0.0       0.0       0.0       0.0    3      0.0  ...       0.0       0.0       0.0       0.0       0.0       0.0    4      0.0  ...       0.0       0.0       0.0       0.0       0.0       0.0        pixel781  pixel782  pixel783  pixel784   0       0.0       0.0       0.0       0.0   1       0.0       0.0       0.0       0.0   2       0.0       0.0       0.0       0.0   3       0.0       0.0       0.0       0.0   4       0.0       0.0       0.0       0.0    [5 rows x 784 columns], 0    5 1    0 2    4 3    1 4    9 Name: class, dtype: category Categories (10, object): ['0', '1', '2', '3', ..., '6', '7', '8', '9'])</code></pre><p><strong>如果说人话,X是这个样子的</strong></p><p><img src="/img/%E6%A8%A1%E5%9E%8B%E8%AF%84%E4%BC%B0/9.png" alt="X" /></p><p>接下来拆分训练集和测试集</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">X_train, X_test, y_train, y_test = X[:<span class="hljs-number">60000</span>], X[<span class="hljs-number">60000</span>:], y[:<span class="hljs-number">60000</span>], y[<span class="hljs-number">60000</span>:]<br></code></pre></td></tr></table></figure><p>洗牌操作（shuffle）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">np.random.seed(<span class="hljs-number">42</span>)  <br><span class="hljs-comment">#----------------------</span><br>shuffle_index = np.random.permutation(<span class="hljs-number">60000</span>)<br>X_train, y_train = X_train.iloc[shuffle_index],y_train.iloc[shuffle_index]<br></code></pre></td></tr></table></figure><p>打乱了x_train和y_train数据的顺序，这步还可以用</p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs nix">df.sample(<span class="hljs-attr">frac=1)</span><br><span class="hljs-comment">#或</span><br>from sklearn.utils <span class="hljs-built_in">import</span> shuffle<br><br><span class="hljs-attr">df</span> = shuffle(df)<br></code></pre></td></tr></table></figure><p>x_train,y_train变成了这个样子</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">X_train.head(),y_train.head()<br></code></pre></td></tr></table></figure><pre><code>(       pixel1  pixel2  pixel3  pixel4  pixel5  pixel6  pixel7  pixel8  pixel9  \ 12628     0.0     0.0     0.0     0.0     0.0     0.0     0.0     0.0     0.0    37730     0.0     0.0     0.0     0.0     0.0     0.0     0.0     0.0     0.0    39991     0.0     0.0     0.0     0.0     0.0     0.0     0.0     0.0     0.0    8525      0.0     0.0     0.0     0.0     0.0     0.0     0.0     0.0     0.0    8279      0.0     0.0     0.0     0.0     0.0     0.0     0.0     0.0     0.0            pixel10  ...  pixel775  pixel776  pixel777  pixel778  pixel779  \ 12628      0.0  ...       0.0       0.0       0.0       0.0       0.0    37730      0.0  ...       0.0       0.0       0.0       0.0       0.0    39991      0.0  ...       0.0       0.0       0.0       0.0       0.0    8525       0.0  ...       0.0       0.0       0.0       0.0       0.0    8279       0.0  ...       0.0       0.0       0.0       0.0       0.0            pixel780  pixel781  pixel782  pixel783  pixel784   12628       0.0       0.0       0.0       0.0       0.0   37730       0.0       0.0       0.0       0.0       0.0   39991       0.0       0.0       0.0       0.0       0.0   8525        0.0       0.0       0.0       0.0       0.0   8279        0.0       0.0       0.0       0.0       0.0    [5 rows x 784 columns], 12628    7 37730    3 39991    8 8525     9 8279     3 Name: class, dtype: category Categories (10, object): ['0', '1', '2', '3', ..., '6', '7', '8', '9'])</code></pre><h2 id="交叉验证"><a class="markdownIt-Anchor" href="#交叉验证"></a> 交叉验证</h2><p><img src="/img/%E6%A8%A1%E5%9E%8B%E8%AF%84%E4%BC%B0/5.png" alt="title" /></p><p><img src="/img/%E6%A8%A1%E5%9E%8B%E8%AF%84%E4%BC%B0/7.png" alt="title" /></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">y_train_5 = y_train.isin([<span class="hljs-string">&quot;5&quot;</span>])<br>y_test_5 = y_train.isin([<span class="hljs-string">&quot;5&quot;</span>])<br><br>y_train.head(),y_train_5.head()<br></code></pre></td></tr></table></figure><pre><code>(12628    7 37730    3 39991    8 8525     9 8279     3 Name: class, dtype: category Categories (10, object): ['0', '1', '2', '3', ..., '6', '7', '8', '9'], 12628    False 37730    False 39991    False 8525     False 8279     False Name: class, dtype: bool)</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> sklearn.linear_model <span class="hljs-keyword">import</span> SGDClassifier<br>sgd_clf = SGDClassifier(max_iter=<span class="hljs-number">5</span>,random_state=<span class="hljs-number">42</span>,shuffle=<span class="hljs-literal">True</span>)<br>sgd_clf.fit(X_train,y_train)<br></code></pre></td></tr></table></figure><pre><code>SGDClassifier(max_iter=5, random_state=42)</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#随便预测一个数据</span><br>sgd_clf.predict([X.iloc[<span class="hljs-number">19999</span>]])<br></code></pre></td></tr></table></figure><pre><code>array(['2'], dtype='&lt;U1')</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#实际的数据</span><br>y[<span class="hljs-number">19999</span>]<br></code></pre></td></tr></table></figure><pre><code>'2'</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#交叉验证准确率</span><br><span class="hljs-keyword">from</span> sklearn.model_selection <span class="hljs-keyword">import</span> cross_val_score<br>cross_val_score(sgd_clf,X_train,y_train_5,cv=<span class="hljs-number">3</span>,scoring=<span class="hljs-string">&#x27;accuracy&#x27;</span>)<br></code></pre></td></tr></table></figure><pre><code>array([0.964 , 0.9579, 0.9571])</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#手动实现交叉验证准确率</span><br><span class="hljs-keyword">from</span> sklearn.model_selection <span class="hljs-keyword">import</span> StratifiedKFold<br><span class="hljs-keyword">from</span> sklearn.base <span class="hljs-keyword">import</span> clone<br><br>skflods = StratifiedKFold(n_splits=<span class="hljs-number">3</span>,random_state=<span class="hljs-number">42</span>,shuffle=<span class="hljs-literal">True</span>)<br><span class="hljs-keyword">for</span> train_index,test_index <span class="hljs-keyword">in</span> skflods.split(X_train,y_train_5):<br>    clone_clf = clone(sgd_clf)<br>    X_train_folds = X_train.iloc[train_index]<br>    y_train_folds = y_train_5.iloc[train_index]<br>    X_test_folds = X_train.iloc[test_index]<br>    y_test_folds = y_train_5.iloc[test_index]<br>    <br>    clone_clf.fit(X_train_folds,y_train_folds)<br>    y_pred = clone_clf.predict(X_test_folds)<br>    n_correct = <span class="hljs-built_in">sum</span>(y_pred == y_test_folds)<br>    print(n_correct/<span class="hljs-built_in">len</span>(y_pred))<br></code></pre></td></tr></table></figure><pre><code>0.9630.94550.95255</code></pre><h2 id="confusion-matrix-混淆矩阵"><a class="markdownIt-Anchor" href="#confusion-matrix-混淆矩阵"></a> Confusion Matrix-混淆矩阵</h2><p><img src="/img/%E6%A8%A1%E5%9E%8B%E8%AF%84%E4%BC%B0/8.png" alt="title" /></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> sklearn.model_selection <span class="hljs-keyword">import</span> cross_val_predict<br>y_train_pred = cross_val_predict(sgd_clf,X_train,y_train_5,cv=<span class="hljs-number">3</span>)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">y_train_pred<br></code></pre></td></tr></table></figure><pre><code>array([False, False, False, ..., False, False, False])</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#混淆矩阵计算</span><br><span class="hljs-keyword">from</span> sklearn.metrics <span class="hljs-keyword">import</span> confusion_matrix<br>confusion_matrix(y_train_5,y_train_pred)<br></code></pre></td></tr></table></figure><pre><code>array([[54058,   521],       [ 1899,  3522]])</code></pre><p>negative class  [[ <strong>true negatives</strong> , <strong>false positives</strong> ],</p><p>positive class  [ <strong>false negatives</strong> , <strong>true positives</strong> ]]</p><ul><li><p>true negatives:  54058个数据被正确的分为非5类别</p></li><li><p>false positives：521张被错误的分为5类别</p></li><li><p>false negatives：1899张错误的分为非5类别</p></li><li><p>true positives： 3522张被正确的分为5类别</p></li></ul><p>一个完美的分类器应该只有<strong>true positives</strong> 和 <strong>true negatives</strong>, 即主对角线元素不为0，其余元素为0</p><h3 id="precision-and-recall"><a class="markdownIt-Anchor" href="#precision-and-recall"></a> Precision and Recall</h3><p><strong><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mtext> precision </mtext><mo>=</mo><mfrac><mrow><mi>T</mi><mi>P</mi></mrow><mrow><mi>T</mi><mi>P</mi><mo>+</mo><mi>F</mi><mi>P</mi></mrow></mfrac></mrow><annotation encoding="application/x-tex">\text { precision }=\frac{T P}{T P+F P}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8623000000000001em;vertical-align:-0.19444em;"></span><span class="mord text"><span class="mord"> precision </span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.275662em;vertical-align:-0.403331em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.872331em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">T</span><span class="mord mathdefault mtight" style="margin-right:0.13889em;">P</span><span class="mbin mtight">+</span><span class="mord mathdefault mtight" style="margin-right:0.13889em;">F</span><span class="mord mathdefault mtight" style="margin-right:0.13889em;">P</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">T</span><span class="mord mathdefault mtight" style="margin-right:0.13889em;">P</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.403331em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></strong></p><p><strong><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mtext> recall </mtext><mo>=</mo><mfrac><mrow><mi>T</mi><mi>P</mi></mrow><mrow><mi>T</mi><mi>P</mi><mo>+</mo><mi>F</mi><mi>N</mi></mrow></mfrac></mrow><annotation encoding="application/x-tex">\text { recall }=\frac{T P}{T P+F N}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord text"><span class="mord"> recall </span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.275662em;vertical-align:-0.403331em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.872331em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">T</span><span class="mord mathdefault mtight" style="margin-right:0.13889em;">P</span><span class="mbin mtight">+</span><span class="mord mathdefault mtight" style="margin-right:0.13889em;">F</span><span class="mord mathdefault mtight" style="margin-right:0.10903em;">N</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">T</span><span class="mord mathdefault mtight" style="margin-right:0.13889em;">P</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.403331em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></strong></p><p><img src="/img/%E6%A8%A1%E5%9E%8B%E8%AF%84%E4%BC%B0/1.png" alt="title" /></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> sklearn.metrics <span class="hljs-keyword">import</span> precision_score,recall_score<br>precision_score(y_train_5,y_train_pred)<br></code></pre></td></tr></table></figure><pre><code>0.8711352955725946</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">recall_score(y_train_5,y_train_pred)<br></code></pre></td></tr></table></figure><pre><code>0.6496956281128943</code></pre><h3 id="f1-score"><a class="markdownIt-Anchor" href="#f1-score"></a> F1 score</h3><p>将<strong>Precision</strong> 和 <strong>Recall</strong>结合到一个称为<strong>F1 score</strong> 的指标,调和平均值给予低值更多权重。 因此，如果召回和精确度都很高，分类器将获得高F 1分数。</p><p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>F</mi><mn>1</mn></msub><mo>=</mo><mfrac><mn>2</mn><mrow><mfrac><mn>1</mn><mtext> precision </mtext></mfrac><mo>+</mo><mfrac><mn>1</mn><mtext> recall </mtext></mfrac></mrow></mfrac><mo>=</mo><mn>2</mn><mo>×</mo><mfrac><mrow><mtext> precision </mtext><mo>×</mo><mtext> recall </mtext></mrow><mrow><mtext> precision </mtext><mo>+</mo><mtext> recall </mtext></mrow></mfrac><mo>=</mo><mfrac><mrow><mi>T</mi><mi>P</mi></mrow><mrow><mi>T</mi><mi>P</mi><mo>+</mo><mfrac><mrow><mi>F</mi><mi>N</mi><mo>+</mo><mi>F</mi><mi>P</mi></mrow><mn>2</mn></mfrac></mrow></mfrac></mrow><annotation encoding="application/x-tex">F_{1}=\frac{2}{\frac{1}{\text { precision }}+\frac{1}{\text { recall }}}=2 \times \frac{\text { precision } \times \text { recall }}{\text { precision }+\text { recall }}=\frac{T P}{T P+\frac{F N+F P}{2}}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.13889em;">F</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.584148em;vertical-align:-0.7390399999999999em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.845108em;"><span style="top:-2.5989799999999996em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mopen nulldelimiter sizing reset-size3 size6"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8443142857142858em;"><span style="top:-2.656em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord text mtight"><span class="mord mtight"> precision </span></span></span></span></span><span style="top:-3.2255000000000003em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line mtight" style="border-bottom-width:0.049em;"></span></span><span style="top:-3.384em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.48288571428571425em;"><span></span></span></span></span></span><span class="mclose nulldelimiter sizing reset-size3 size6"></span></span><span class="mbin mtight">+</span><span class="mord mtight"><span class="mopen nulldelimiter sizing reset-size3 size6"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8443142857142858em;"><span style="top:-2.656em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord text mtight"><span class="mord mtight"> recall </span></span></span></span></span><span style="top:-3.2255000000000003em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line mtight" style="border-bottom-width:0.049em;"></span></span><span style="top:-3.384em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.344em;"><span></span></span></span></span></span><span class="mclose nulldelimiter sizing reset-size3 size6"></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.7390399999999999em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">2</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.4133239999999998em;vertical-align:-0.481108em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9322159999999999em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord text mtight"><span class="mord mtight"> precision </span></span><span class="mbin mtight">+</span><span class="mord text mtight"><span class="mord mtight"> recall </span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.446108em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord text mtight"><span class="mord mtight"> precision </span></span><span class="mbin mtight">×</span><span class="mord text mtight"><span class="mord mtight"> recall </span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.481108em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.5335959999999997em;vertical-align:-0.6612649999999999em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.872331em;"><span style="top:-2.5795350000000004em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">T</span><span class="mord mathdefault mtight" style="margin-right:0.13889em;">P</span><span class="mbin mtight">+</span><span class="mord mtight"><span class="mopen nulldelimiter sizing reset-size3 size6"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8720928571428571em;"><span style="top:-2.656em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.2255000000000003em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line mtight" style="border-bottom-width:0.049em;"></span></span><span style="top:-3.384em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">F</span><span class="mord mathdefault mtight" style="margin-right:0.10903em;">N</span><span class="mbin mtight">+</span><span class="mord mathdefault mtight" style="margin-right:0.13889em;">F</span><span class="mord mathdefault mtight" style="margin-right:0.13889em;">P</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.344em;"><span></span></span></span></span></span><span class="mclose nulldelimiter sizing reset-size3 size6"></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.13889em;">T</span><span class="mord mathdefault mtight" style="margin-right:0.13889em;">P</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.6612649999999999em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> sklearn.metrics <span class="hljs-keyword">import</span> f1_score<br>f1_score(y_train_5,y_train_pred)<br></code></pre></td></tr></table></figure><pre><code>0.7442941673710904</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>machine learning</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ml</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Pandas 打乱数据(shuffle)</title>
    <link href="/2021/02/20/Pandas-%E6%89%93%E4%B9%B1%E6%95%B0%E6%8D%AE-shuffle/"/>
    <url>/2021/02/20/Pandas-%E6%89%93%E4%B9%B1%E6%95%B0%E6%8D%AE-shuffle/</url>
    
    <content type="html"><![CDATA[<h1 id="pandas-打乱数据shuffle"><a class="markdownIt-Anchor" href="#pandas-打乱数据shuffle"></a> Pandas 打乱数据(shuffle)</h1><a id="more"></a><h2 id="方法一"><a class="markdownIt-Anchor" href="#方法一"></a> 方法一</h2><p>最简单的方法就是采用pandas中自带的 sample这个方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">df.sample(frac=<span class="hljs-number">1</span>)<br></code></pre></td></tr></table></figure><p>frac是要返回的比例，比如df中有10行数据，我只想返回其中的30%,那么frac=0.3。</p><p>有时候，我们可能需要打混后数据集的index（索引）还是按照正常的排序。我们只需要这样操作</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">df.sample(frac=<span class="hljs-number">1</span>).reset_index(drop=<span class="hljs-literal">True</span>)<br></code></pre></td></tr></table></figure><h2 id="方法二"><a class="markdownIt-Anchor" href="#方法二"></a> 方法二</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> sklearn.utils <span class="hljs-keyword">import</span> shuffle<br><br>df = shuffle(df)<br></code></pre></td></tr></table></figure><h2 id="方法三"><a class="markdownIt-Anchor" href="#方法三"></a> 方法三</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">df.iloc[np.random.permutation(<span class="hljs-built_in">len</span>(df))]<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ml</tag>
      
      <tag>pandas</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>常用在线工具大合集</title>
    <link href="/2021/02/20/%E5%B8%B8%E7%94%A8%E5%9C%A8%E7%BA%BF%E5%B7%A5%E5%85%B7%E5%A4%A7%E5%90%88%E9%9B%86/"/>
    <url>/2021/02/20/%E5%B8%B8%E7%94%A8%E5%9C%A8%E7%BA%BF%E5%B7%A5%E5%85%B7%E5%A4%A7%E5%90%88%E9%9B%86/</url>
    
    <content type="html"><![CDATA[<h1 id="常用在线工具大合集"><a class="markdownIt-Anchor" href="#常用在线工具大合集"></a> 常用在线工具大合集</h1><a id="more"></a><h2 id="机器学习"><a class="markdownIt-Anchor" href="#机器学习"></a> 机器学习</h2><p><a href="https://scikit-learn.org/stable/">sk-learn</a></p><p><a href="https://www.kaggle.com/">kaggle</a></p><h2 id="python"><a class="markdownIt-Anchor" href="#python"></a> Python</h2><p><a href="https://www.numpy.org.cn/reference/">numpy</a></p><p><a href="https://pandas.pydata.org/docs/reference/index.html">pandas</a></p><p><a href="https://docs.streamlit.io/en/stable/">streamlit</a></p><p><a href="https://plotly.com/python/">plotly</a></p><h3 id="爬虫工具"><a class="markdownIt-Anchor" href="#爬虫工具"></a> 爬虫工具</h3><p><a href="https://github.com/lorien/awesome-web-scraping/blob/master/python.md">爬虫包英文</a></p><p><a href="https://yq.aliyun.com/articles/416505">爬虫包中文</a></p><p><a href="https://proxyhttp.net/check">代理ip检测</a></p><p><a href="https://curl.trillworks.com/">curl转python requests</a></p><h2 id="ios"><a class="markdownIt-Anchor" href="#ios"></a> ios</h2><h2 id="图片转换"><a class="markdownIt-Anchor" href="#图片转换"></a> 图片转换</h2><p><a href="https://ezgif.com/">ezgif 图片转换工具</a></p>]]></content>
    
    
    <categories>
      
      <category>Tools</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Tools</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>lambda,map,reduce,filter,zip函数</title>
    <link href="/2021/02/20/lambda-map-reduce-filter-zip%E5%87%BD%E6%95%B0/"/>
    <url>/2021/02/20/lambda-map-reduce-filter-zip%E5%87%BD%E6%95%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="python中lambdamapreducefilterzip函数"><a class="markdownIt-Anchor" href="#python中lambdamapreducefilterzip函数"></a> python中lambda,map,reduce,filter,zip函数</h1><a id="more"></a><h2 id="函数式编程"><a class="markdownIt-Anchor" href="#函数式编程"></a> 函数式编程</h2><p>函数式编程（Functional Programming）或者函数程序设计，又称泛函编程，是一种编程范型，它将计算机运算视为数学上的函数计算，并且避免使用程序状态以及易变对象。简单来讲，函数式编程是一种“广播式”的编程，一般结合前面提到过的lambda定义函数，用于科学计算中，会显得特别简洁方便。</p><p>在Python中，函数式编程主要由几个函数的使用构成：lambda（）、map（）、reduce（）、filter（），zip（）。</p><h3 id="列表解析"><a class="markdownIt-Anchor" href="#列表解析"></a> 列表解析</h3><p>列表解析在python中能够简化我们对列表内元素逐一进行操作的代码，也称列表推导式，可以替代函数简化表达。</p><p>具体例子：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-selector-tag">a</span> = <span class="hljs-selector-attr">[1, 2, 3,4,5]</span><br><span class="hljs-selector-tag">b</span> = <span class="hljs-selector-attr">[]</span><br><span class="hljs-keyword">for</span> <span class="hljs-selector-tag">i</span> <span class="hljs-keyword">in</span> <span class="hljs-selector-tag">a</span>:<br>    <span class="hljs-selector-tag">b</span><span class="hljs-selector-class">.append</span>(<span class="hljs-selector-tag">i</span> *<span class="hljs-number">2</span>)<br></code></pre></td></tr></table></figure><p>使用列表解析表示方式：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">a</span> = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>]<br><span class="hljs-attr">b</span> = [i*<span class="hljs-number">2</span> for i in a]<br></code></pre></td></tr></table></figure><p>从上面的式子来看，列表解析的表达比for循环要来得简洁。</p><h3 id="ambda函数"><a class="markdownIt-Anchor" href="#ambda函数"></a> ambda()函数</h3><p>lambda是Python支持一种有趣的语法，它允许你快速定义单行的最小函数，类似与C语言中的宏，可以用在任何需要函数。</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">f</span> = lambda x: x * <span class="hljs-number">2</span><br><span class="hljs-attribute">f</span>(<span class="hljs-number">3</span>)<br><span class="hljs-comment">#结果为6</span><br></code></pre></td></tr></table></figure><h3 id="map函数"><a class="markdownIt-Anchor" href="#map函数"></a> map()函数</h3><p>先定义一个函数，然后再用map（）命令将函数逐一应用到（map）列表中的每个元素，最后返回一个数组。map（）命令也接受多参数的函数，<br />map函数格式为map(function,sequence)<br />把sequence中的值当参数逐个传给function，返回一个包含函数执行结果的list。<br />如果function有两个参数，即map(function,sequence1,sequence2)。</p><p>如map（lambda x，y：x*y，a，b）表示将a、b两个列表的元素对应相乘，把结果返回给新列表。</p><p>假设有一个列表a＝[1，2，3]，要给列表中的每个元素都加2得到一个新列表</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">b</span> = map(lambda x: x+<span class="hljs-number">2</span>, a)<br><span class="hljs-attr">b</span> = list(b) <br><span class="hljs-comment">#结果是[3, 4, 5]</span><br></code></pre></td></tr></table></figure><p>有了列表解析，为什么还要有map（）命令呢？<br />其实列表解析虽然代码简短，但是本质上还是for命令，而Python的for命令效率并不高，而map（）函数实现了相同的功能，并且效率更高，原则上来说，它的循环命令速度相当于C语言。</p><h3 id="reduce函数"><a class="markdownIt-Anchor" href="#reduce函数"></a> reduce()函数</h3><p>reduce（）函数。它有点像map（）函数，但map（）函数用于逐一遍历，而是reduce（）函数用于递归计算。<br />reduce函数格式为reduce(function,sequence)<br />function接收的参数个数只能为2<br />先把sequence中第一个值和第二个值当参数传给function，再把function的返回值和第三个值当参数传给<br />function，然后只返回一个结果。</p><p>具体例子如下</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">s</span> = <span class="hljs-number">1</span><br><span class="hljs-attribute">for</span> i in range(<span class="hljs-number">1</span>, <span class="hljs-number">5</span>):<br>     <span class="hljs-attribute">s</span> = s * i<br></code></pre></td></tr></table></figure><p>上面是一个1到4的阶乘，如果换成reduce函数可以简化为：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">reduce</span><span class="hljs-params">(lambda x,y: x*y, range(<span class="hljs-number">1</span>, <span class="hljs-number">5</span>)</span></span>)<br></code></pre></td></tr></table></figure><p>其中，lambda x，y：x*y构造了一个二元函数，返回两个参数的乘积。reduce命令首先将列表的前两个元素作为函数的参数进行运算，然后将运算结果与第三个数字作为函数的参数，然后再将运算结果与第四个数字作为函数的参数……依此递推，直到列表结束，返回最终结果。</p><h3 id="filter函数"><a class="markdownIt-Anchor" href="#filter函数"></a> filter()函数</h3><p>filter（）函数。顾名思义，它是一个过滤器，用来筛选出列表中符合条件的元素。<br />filter函数格式为filter(function,sequence)<br />function的返回值只能是True或False<br />把sequence中的值逐个当参数传给function，如果function(x)的返回值是True，就把x加到filter的返回值里面。</p><p>具体例子如下：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs stylus">b=<span class="hljs-selector-attr">[]</span><br><span class="hljs-keyword">for</span> <span class="hljs-selector-tag">i</span> <span class="hljs-keyword">in</span> range(<span class="hljs-number">10</span>):<br>     <span class="hljs-keyword">if</span> <span class="hljs-selector-tag">i</span> &gt;<span class="hljs-number">3</span> and &lt;<span class="hljs-number">6</span>:<br>        <span class="hljs-selector-tag">b</span><span class="hljs-selector-class">.append</span>(i) <br></code></pre></td></tr></table></figure><p>使用filte（）函数实现以上目的的语句如下：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">b</span>=filter(lambda x:x&gt;<span class="hljs-number">3</span> and x&lt;<span class="hljs-number">6</span> ,range(<span class="hljs-number">10</span>))<br><span class="hljs-attr">b</span>=list(b)<br></code></pre></td></tr></table></figure><p>整体上比for循环要简洁不是，而且速度上要比循环来得快。</p><h3 id="zip函数"><a class="markdownIt-Anchor" href="#zip函数"></a> zip()函数</h3><p>返回一个元祖列表，该元祖按顺序包含每个序列的相应元素，以最小的一个为准。<br />zip函数格式为zip(sequence1,sequence2,…)</p><p>具体例子如下：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">a</span>=[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>]<br><span class="hljs-attribute">b</span>=[<span class="hljs-number">5</span>,<span class="hljs-number">6</span>]<br><br><span class="hljs-attribute">for</span> i,j in zip(a,b):<br>     <span class="hljs-attribute">print</span>(i,j)<br><br><span class="hljs-comment">#结果为(1,5)  (2,6)</span><br></code></pre></td></tr></table></figure><p>在python中，把很多内置函数结合起来使用，可以使用很少的代码来实现很多复杂的功能，结合匿名函数，列表解析一起使用，功能更加强大.使用内置函数最显而易见的好处是:<br />速度快，使用内置函数，比普通的PYTHON实现，速度要快一倍左右，还有就是代码简洁。</p>]]></content>
    
    
    <categories>
      
      <category>python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>梯度下降法</title>
    <link href="/2021/02/19/%E6%A2%AF%E5%BA%A6%E4%B8%8B%E9%99%8D%E6%B3%95%E5%8F%8A%E5%85%B6%E5%AE%9E%E7%8E%B0/"/>
    <url>/2021/02/19/%E6%A2%AF%E5%BA%A6%E4%B8%8B%E9%99%8D%E6%B3%95%E5%8F%8A%E5%85%B6%E5%AE%9E%E7%8E%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="梯度下降法"><a class="markdownIt-Anchor" href="#梯度下降法"></a> 梯度下降法</h1><p><a href="https://www.jianshu.com/p/c7e642877b0e">来自简书,点此开启传送</a></p><a id="more"></a><blockquote><ul><li>梯度下降的场景假设</li><li>梯度</li><li>梯度下降算法的数学解释</li><li>梯度下降算法的实例</li><li>梯度下降算法的实现</li><li>Further reading</li></ul></blockquote><p>本文将从一个下山的场景开始，先提出梯度下降算法的基本思想，进而从数学上解释梯度下降算法的原理，最后实现一个简单的梯度下降算法的实例！</p><h2 id="梯度下降的场景假设"><a class="markdownIt-Anchor" href="#梯度下降的场景假设"></a> 梯度下降的场景假设</h2><blockquote><p>梯度下降法的基本思想可以类比为一个下山的过程。假设这样一个场景：一个人被困在山上，需要从山上下来(i.e. 找到山的最低点，也就是山谷)。但此时山上的浓雾很大，导致可视度很低。因此，下山的路径就无法确定，他必须利用自己周围的信息去找到下山的路径。这个时候，他就可以利用梯度下降算法来帮助自己下山。具体来说就是，以他当前的所处的位置为基准，寻找这个位置最陡峭的地方，然后朝着山的高度下降的地方走，同理，如果我们的目标是上山，也就是爬到山顶，那么此时应该是朝着最陡峭的方向往上走。然后每走一段距离，都反复采用同一个方法，最后就能成功的抵达山谷。</p><p><img src="/img/%E6%A2%AF%E5%BA%A6%E4%B8%8B%E9%99%8D%E7%AE%97%E6%B3%95%E5%8F%8A%E5%AE%9E%E7%8E%B0/1.webp" alt="" /></p><p>我们同时可以假设这座山最陡峭的地方是无法通过肉眼立马观察出来的，而是需要一个复杂的工具来测量，同时，这个人此时正好拥有测量出最陡峭方向的能力。所以，此人每走一段距离，都需要一段时间来测量所在位置最陡峭的方向，这是比较耗时的。那么为了在太阳下山之前到达山底，就要尽可能的减少测量方向的次数。这是一个两难的选择，如果测量的频繁，可以保证下山的方向是绝对正确的，但又非常耗时，如果测量的过少，又有偏离轨道的风险。所以需要找到一个合适的测量方向的频率，来确保下山的方向不错误，同时又不至于耗时太多！</p></blockquote><h2 id="梯度下降"><a class="markdownIt-Anchor" href="#梯度下降"></a> 梯度下降</h2><p>梯度下降的基本过程就和下山的场景很类似。</p><hr /><p>首先，我们有一个可<a href="https://link.jianshu.com?t=https%3A%2F%2Fen.wikipedia.org%2Fwiki%2FDifferentiable_function"><em>微分</em></a>的函数。这个函数就代表着一座山。我们的目标就是找到这个函数的最小值，也就是山底。根据之前的场景假设，最快的下山的方式就是找到当前位置最陡峭的方向，然后沿着此方向向下走，对应到函数中，就是找到给定点的<a href="https://link.jianshu.com?t=https%3A%2F%2Fen.wikipedia.org%2Fwiki%2FGradient"><em>梯度</em></a> ，然后朝着梯度相反的方向，就能让函数值下降的最快！因为梯度的方向就是函数之变化最快的方向(在后面会详细解释)<br />所以，我们重复利用这个方法，反复求取梯度，最后就能到达局部的最小值，这就类似于我们下山的过程。而求取梯度就确定了最陡峭的方向，也就是场景中测量方向的手段。那么为什么梯度的方向就是最陡峭的方向呢？接下来，我们从微分开始讲起</p><h3 id="微分"><a class="markdownIt-Anchor" href="#微分"></a> 微分</h3><p>看待微分的意义，可以有不同的角度，最常用的两种是：</p><ul><li>函数图像中，某点的切线的斜率</li><li>函数的变化率<br />几个微分的例子：</li></ul><p><img src="/img/%E6%A2%AF%E5%BA%A6%E4%B8%8B%E9%99%8D%E7%AE%97%E6%B3%95%E5%8F%8A%E5%AE%9E%E7%8E%B0/2.webp" alt="" /></p><p>上面的例子都是单变量的微分，当一个函数有多个变量的时候，就有了多变量的微分，即分别对每个变量进行求微分</p><p><img src="/img/%E6%A2%AF%E5%BA%A6%E4%B8%8B%E9%99%8D%E7%AE%97%E6%B3%95%E5%8F%8A%E5%AE%9E%E7%8E%B0/3.webp" alt="" /></p><h3 id="梯度"><a class="markdownIt-Anchor" href="#梯度"></a> 梯度</h3><p>梯度实际上就是多变量微分的一般化。<br />下面这个例子</p><p><img src="/img/%E6%A2%AF%E5%BA%A6%E4%B8%8B%E9%99%8D%E7%AE%97%E6%B3%95%E5%8F%8A%E5%AE%9E%E7%8E%B0/4.webp" alt="" /></p><p>我们可以看到，梯度就是分别对每个变量进行微分，然后用逗号分割开，梯度是用&lt;&gt;包括起来，说明梯度其实一个向量。</p><p>梯度是微积分中一个很重要的概念，之前提到过梯度的意义</p><ul><li>在单变量的函数中，梯度其实就是函数的微分，代表着函数在某个给定点的切线的斜率</li><li>在多变量函数中，梯度是一个向量，向量有方向，梯度的方向就指出了函数在给定点的上升最快的方向</li></ul><p>这也就说明了为什么我们需要千方百计的求取梯度！我们需要到达山底，就需要在每一步观测到此时最陡峭的地方，梯度就恰巧告诉了我们这个方向。梯度的方向是函数在给定点上升最快的方向，那么梯度的反方向就是函数在给定点下降最快的方向，这正是我们所需要的。所以我们只要沿着梯度的方向一直走，就能走到局部的最低点！</p><p><img src="/img/%E6%A2%AF%E5%BA%A6%E4%B8%8B%E9%99%8D%E7%AE%97%E6%B3%95%E5%8F%8A%E5%AE%9E%E7%8E%B0/5.webp" alt="" /></p><h3 id="梯度下降算法的数学解释"><a class="markdownIt-Anchor" href="#梯度下降算法的数学解释"></a> 梯度下降算法的数学解释</h3><p>上面我们花了大量的篇幅介绍梯度下降算法的基本思想和场景假设，以及梯度的概念和思想。下面我们就开始从数学上解释梯度下降算法的计算过程和思想！</p><p><img src="/img/%E6%A2%AF%E5%BA%A6%E4%B8%8B%E9%99%8D%E7%AE%97%E6%B3%95%E5%8F%8A%E5%AE%9E%E7%8E%B0/6.webp" alt="img" /></p><p>此公式的意义是：J是关于Θ的一个函数，我们当前所处的位置为Θ0点，要从这个点走到J的最小值点，也就是山底。首先我们先确定前进的方向，也就是梯度的反向，然后走一段距离的步长，也就是α，走完这个段步长，就到达了Θ1这个点！</p><p><img src="/img/%E6%A2%AF%E5%BA%A6%E4%B8%8B%E9%99%8D%E7%AE%97%E6%B3%95%E5%8F%8A%E5%AE%9E%E7%8E%B0/7.webp" alt="" /></p><p>下面就这个公式的几个常见的疑问：</p><ul><li>α是什么含义？<br />α在梯度下降算法中被称作为<strong>学习率</strong>或者<strong>步长</strong>，意味着我们可以通过α来控制每一步走的距离，以保证不要步子跨的太大扯着蛋，哈哈，其实就是不要走太快，错过了最低点。同时也要保证不要走的太慢，导致太阳下山了，还没有走到山下。所以α的选择在梯度下降法中往往是很重要的！α不能太大也不能太小，太小的话，可能导致迟迟走不到最低点，太大的话，会导致错过最低点！</li></ul><p><img src="/img/%E6%A2%AF%E5%BA%A6%E4%B8%8B%E9%99%8D%E7%AE%97%E6%B3%95%E5%8F%8A%E5%AE%9E%E7%8E%B0/8.webp" alt="" /></p><ul><li>为什么要梯度要乘以一个负号？<br />梯度前加一个负号，就意味着朝着梯度相反的方向前进！我们在前文提到，梯度的方向实际就是函数在此点上升最快的方向！而我们需要朝着下降最快的方向走，自然就是负的梯度的方向，所以此处需要加上负号</li></ul><h3 id="梯度下降算法的实例"><a class="markdownIt-Anchor" href="#梯度下降算法的实例"></a> 梯度下降算法的实例</h3><p>我们已经基本了解了梯度下降算法的计算过程，那么我们就来看几个梯度下降算法的小实例，首先从单变量的函数开始</p><h3 id="单变量函数的梯度下降"><a class="markdownIt-Anchor" href="#单变量函数的梯度下降"></a> 单变量函数的梯度下降</h3><p>我们假设有一个单变量的函数</p><p><img src="/img/%E6%A2%AF%E5%BA%A6%E4%B8%8B%E9%99%8D%E7%AE%97%E6%B3%95%E5%8F%8A%E5%AE%9E%E7%8E%B0/9.webp" alt="" /></p><p>函数的微分</p><p><img src="/img/%E6%A2%AF%E5%BA%A6%E4%B8%8B%E9%99%8D%E7%AE%97%E6%B3%95%E5%8F%8A%E5%AE%9E%E7%8E%B0/10.webp" alt="" /></p><p>初始化起点</p><p><img src="/img/%E6%A2%AF%E5%BA%A6%E4%B8%8B%E9%99%8D%E7%AE%97%E6%B3%95%E5%8F%8A%E5%AE%9E%E7%8E%B0/11.webp" alt="" /></p><p>学习率</p><p><img src="/img/%E6%A2%AF%E5%BA%A6%E4%B8%8B%E9%99%8D%E7%AE%97%E6%B3%95%E5%8F%8A%E5%AE%9E%E7%8E%B0/12.webp" alt="" /></p><p>根据梯度下降的计算公式</p><p><img src="/img/%E6%A2%AF%E5%BA%A6%E4%B8%8B%E9%99%8D%E7%AE%97%E6%B3%95%E5%8F%8A%E5%AE%9E%E7%8E%B0/13.webp" alt="" /></p><p>我们开始进行梯度下降的迭代计算过程：</p><p><img src="/img/%E6%A2%AF%E5%BA%A6%E4%B8%8B%E9%99%8D%E7%AE%97%E6%B3%95%E5%8F%8A%E5%AE%9E%E7%8E%B0/14.webp" alt="" /></p><p>如图，经过四次的运算，也就是走了四步，基本就抵达了函数的最低点，也就是山底</p><p><img src="/img/%E6%A2%AF%E5%BA%A6%E4%B8%8B%E9%99%8D%E7%AE%97%E6%B3%95%E5%8F%8A%E5%AE%9E%E7%8E%B0/15.webp" alt="" /></p><h3 id="多变量函数的梯度下降"><a class="markdownIt-Anchor" href="#多变量函数的梯度下降"></a> 多变量函数的梯度下降</h3><p>我们假设有一个目标函数</p><p><img src="/img/%E6%A2%AF%E5%BA%A6%E4%B8%8B%E9%99%8D%E7%AE%97%E6%B3%95%E5%8F%8A%E5%AE%9E%E7%8E%B0/16.webp" alt="" /></p><p>现在要通过梯度下降法计算这个函数的最小值。我们通过观察就能发现最小值其实就是 (0，0)点。但是接下来，我们会从梯度下降算法开始一步步计算到这个最小值！<br />我们假设初始的起点为：</p><p><img src="/img/%E6%A2%AF%E5%BA%A6%E4%B8%8B%E9%99%8D%E7%AE%97%E6%B3%95%E5%8F%8A%E5%AE%9E%E7%8E%B0/17.webp" alt="img" /></p><p>初始的学习率为：</p><p><img src="/img/%E6%A2%AF%E5%BA%A6%E4%B8%8B%E9%99%8D%E7%AE%97%E6%B3%95%E5%8F%8A%E5%AE%9E%E7%8E%B0/18.webp" alt="img" /></p><p>函数的梯度为：</p><p><img src="/img/%E6%A2%AF%E5%BA%A6%E4%B8%8B%E9%99%8D%E7%AE%97%E6%B3%95%E5%8F%8A%E5%AE%9E%E7%8E%B0/19.webp" alt="img" /></p><p>进行多次迭代：</p><p><img src="/img/%E6%A2%AF%E5%BA%A6%E4%B8%8B%E9%99%8D%E7%AE%97%E6%B3%95%E5%8F%8A%E5%AE%9E%E7%8E%B0/20.webp" alt="img" /></p><p>我们发现，已经基本靠近函数的最小值点</p><p><img src="/img/%E6%A2%AF%E5%BA%A6%E4%B8%8B%E9%99%8D%E7%AE%97%E6%B3%95%E5%8F%8A%E5%AE%9E%E7%8E%B0/21.webp" alt="img" /></p><h2 id="梯度下降算法的实现"><a class="markdownIt-Anchor" href="#梯度下降算法的实现"></a> 梯度下降算法的实现</h2><p>下面我们将用python实现一个简单的梯度下降算法。场景是一个简单的<a href="https://en.wikipedia.org/wiki/Linear_regression"><em>线性回归</em></a>的例子：假设现在我们有一系列的点，如下图所示</p><p><img src="/img/%E6%A2%AF%E5%BA%A6%E4%B8%8B%E9%99%8D%E7%AE%97%E6%B3%95%E5%8F%8A%E5%AE%9E%E7%8E%B0/22.webp" alt="img" /></p><p>我们将用梯度下降法来拟合出这条直线！</p><p>首先，我们需要定义一个代价函数，在此我们选用均方误差代价函数</p><p><img src="/img/%E6%A2%AF%E5%BA%A6%E4%B8%8B%E9%99%8D%E7%AE%97%E6%B3%95%E5%8F%8A%E5%AE%9E%E7%8E%B0/23.webp" alt="img" /></p><p>此公示中</p><ul><li><p>m是数据集中点的个数</p></li><li><p>½是一个常量，这样是为了在求梯度的时候，二次方乘下来就和这里的½抵消了，自然就没有多余的常数系数，方便后续的计算，同时对结果不会有影响</p></li><li><p>y 是数据集中每个点的真实y坐标的值</p></li><li><p>h 是我们的预测函数，根据每一个输入x，根据Θ 计算得到预测的y值，即</p><p><img src="/img/%E6%A2%AF%E5%BA%A6%E4%B8%8B%E9%99%8D%E7%AE%97%E6%B3%95%E5%8F%8A%E5%AE%9E%E7%8E%B0/24.webp" alt="img" /></p></li></ul><p>我们可以根据代价函数看到，代价函数中的变量有两个，所以是一个多变量的梯度下降问题，求解出代价函数的梯度，也就是分别对两个变量进行微分</p><p><img src="/img/%E6%A2%AF%E5%BA%A6%E4%B8%8B%E9%99%8D%E7%AE%97%E6%B3%95%E5%8F%8A%E5%AE%9E%E7%8E%B0/25.webp" alt="img" /></p><p>明确了代价函数和梯度，以及预测的函数形式。我们就可以开始编写代码了。但在这之前，需要说明一点，就是为了方便代码的编写，我们会将所有的公式都转换为矩阵的形式，python中计算矩阵是非常方便的，同时代码也会变得非常的简洁。</p><p>为了转换为矩阵的计算，我们观察到预测函数的形式</p><p><img src="/img/%E6%A2%AF%E5%BA%A6%E4%B8%8B%E9%99%8D%E7%AE%97%E6%B3%95%E5%8F%8A%E5%AE%9E%E7%8E%B0/26.webp" alt="img" /></p><p>我们有两个变量，为了对这个公式进行矩阵化，我们可以给每一个点x增加一维，这一维的值固定为1，这一维将会乘到Θ0上。这样就方便我们统一矩阵化的计算</p><p><img src="/img/%E6%A2%AF%E5%BA%A6%E4%B8%8B%E9%99%8D%E7%AE%97%E6%B3%95%E5%8F%8A%E5%AE%9E%E7%8E%B0/27.webp" alt="img" /></p><p>然后我们将代价函数和梯度转化为矩阵向量相乘的形式</p><p><img src="/img/%E6%A2%AF%E5%BA%A6%E4%B8%8B%E9%99%8D%E7%AE%97%E6%B3%95%E5%8F%8A%E5%AE%9E%E7%8E%B0/28.webp" alt="img" /></p>]]></content>
    
    
    <categories>
      
      <category>machine learning</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ml</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python-streamlit</title>
    <link href="/2021/02/16/Python-streamlit/"/>
    <url>/2021/02/16/Python-streamlit/</url>
    
    <content type="html"><![CDATA[<h1 id="pandas-streamlit"><a class="markdownIt-Anchor" href="#pandas-streamlit"></a> Pandas-streamlit</h1><a id="more"></a><blockquote><p>Streamlit传送门:<a href="https://www.streamlit.io/">https://www.streamlit.io/</a></p></blockquote><h2 id="简介"><a class="markdownIt-Anchor" href="#简介"></a> 简介</h2><p>Streamlit是第一个专门针对机器学习和数据科学团队的应用开发框架，它是开发自定义机器学习工具的最快的方法，可以帮助机器学习工程师快速开发用户交互工具。</p><h2 id="开始"><a class="markdownIt-Anchor" href="#开始"></a> 开始</h2><p>安装streamlit</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">pip <span class="hljs-keyword">install</span> streamlit<br></code></pre></td></tr></table></figure><p>运行streamlit demo</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">streamlit hello</span><br></code></pre></td></tr></table></figure><p>运行streamlit服务</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">streamlit <span class="hljs-builtin-name">run</span> xxx.py<br></code></pre></td></tr></table></figure><p>streamlit文档</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">https:<span class="hljs-regexp">//</span>docs.streamlit.io<span class="hljs-regexp">/en/</span>stable/<br></code></pre></td></tr></table></figure><h2 id="常用api"><a class="markdownIt-Anchor" href="#常用api"></a> 常用api</h2><p>emmmmm 官方文档很香，demo齐全</p><blockquote><p>传送门：<a href="https://docs.streamlit.io/en/stable/api.html">https://docs.streamlit.io/en/stable/api.html</a></p></blockquote>]]></content>
    
    
    <categories>
      
      <category>python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>streamlit</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>python-离线部署开发环境</title>
    <link href="/2021/02/15/python-%E7%A6%BB%E7%BA%BF%E9%83%A8%E7%BD%B2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/"/>
    <url>/2021/02/15/python-%E7%A6%BB%E7%BA%BF%E9%83%A8%E7%BD%B2%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/</url>
    
    <content type="html"><![CDATA[<h1 id="anaconda部署本地环境至离线环境"><a class="markdownIt-Anchor" href="#anaconda部署本地环境至离线环境"></a> Anaconda部署本地环境至离线环境</h1><a id="more"></a><h2 id="准备工作"><a class="markdownIt-Anchor" href="#准备工作"></a> 准备工作</h2><ol><li><p>下载python包</p><blockquote><p><a href="https://www.python.org/downloads/">python官网传送门</a></p></blockquote></li><li><p>克隆环境</p><p>Envs_names离线环境名       base 本地环境名</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">conda create --name envs_names --<span class="hljs-keyword">clone</span> <span class="hljs-title">base</span><br></code></pre></td></tr></table></figure></li><li><p>导出依赖包信息</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">pip <span class="hljs-keyword">freeze</span> &gt; requirements.txt<br></code></pre></td></tr></table></figure><h4 id="遇到的问题"><a class="markdownIt-Anchor" href="#遇到的问题"></a> 遇到的问题：</h4><p>使用 <code>pip freeze &gt; requirements.txt</code> 命令导出已安装的模块，其中部分模块显示了 <code>@ file:///...</code>，而不是具体的版本号。</p><p>直接在其他机器上边使用 <code>pip install -r requirements.txt</code> 安装模块时，就会遇到如下错误</p><blockquote><p>ERROR: Could not install packages due to an EnvironmentError: [Errno 2] No such<br />file or directory: 路径</p></blockquote><h4 id="原因"><a class="markdownIt-Anchor" href="#原因"></a> 原因</h4><p>这是 pip 安装软件包的一种特殊语法（自19.1开始受支持）<a href="https://www.python.org/dev/peps/pep-0440/#direct-references">PEP404</a>，<br />但是该此种路径取决于环境，<code>file:///URL</code> 仅在本地文件系统上可用，你不能将生成的 <code>requirements.txt</code> 文件提供给其他人使用</p><h4 id="解决方法"><a class="markdownIt-Anchor" href="#解决方法"></a> 解决方法</h4><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">pip list <span class="hljs-attribute">--format</span>=freeze &gt; requirements.txt<br></code></pre></td></tr></table></figure><blockquote><p>使用上述命令导出的文件中，会包含如下几个包：distribute，pip，setuptools，wheel，建议手动删除！</p></blockquote></li><li><p>下载依赖包到本地</p><figure class="highlight mizar"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mizar">pip download -r <span class="hljs-keyword">requirements</span>.txt -d your_dirs<br></code></pre></td></tr></table></figure></li></ol><h2 id="在其他离线环境安装所有依赖"><a class="markdownIt-Anchor" href="#在其他离线环境安装所有依赖"></a> 在其他离线环境安装所有依赖</h2><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim">pip install -r requirements.txt --<span class="hljs-keyword">no</span>-<span class="hljs-built_in">index</span> --<span class="hljs-keyword">find</span>-links=your_dirs <br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Environment</category>
      
    </categories>
    
    
    <tags>
      
      <tag>anaconda</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>高等数学-思维导图</title>
    <link href="/2021/02/15/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6-%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE/"/>
    <url>/2021/02/15/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6-%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE/</url>
    
    <content type="html"><![CDATA[<h1 id="高等数学思维导图"><a class="markdownIt-Anchor" href="#高等数学思维导图"></a> 高等数学思维导图</h1><a id="more"></a><blockquote><p>转载自：<a href="https://zhuanlan.zhihu.com/p/59698151">知乎 墨菲不定律</a> <a href="https://blog.csdn.net/touxuecainiao/article/details/106612415">csdn Maverrick</a></p></blockquote><h2 id="高等数学"><a class="markdownIt-Anchor" href="#高等数学"></a> 高等数学</h2><h3 id="函数与极限"><a class="markdownIt-Anchor" href="#函数与极限"></a> 函数与极限</h3><p><img src="/img/kymath/gdsx/1.%E5%87%BD%E6%95%B0%E4%B8%8E%E6%9E%81%E9%99%90.png" alt="1.函数与极限" /></p><h3 id="导数与微分"><a class="markdownIt-Anchor" href="#导数与微分"></a> 导数与微分</h3><p><img src="/img/kymath/gdsx/2.%E5%AF%BC%E6%95%B0%E4%B8%8E%E5%BE%AE%E5%88%86.png" alt="2.导数与微分" /></p><h3 id="微分中值定理与导数的应用"><a class="markdownIt-Anchor" href="#微分中值定理与导数的应用"></a> 微分中值定理与导数的应用</h3><p><img src="/img/kymath/gdsx/3.%E5%BE%AE%E5%88%86%E4%B8%AD%E5%80%BC%E5%AE%9A%E7%90%86%E4%B8%8E%E5%AF%BC%E6%95%B0%E7%9A%84%E5%BA%94%E7%94%A8.png" alt="3.微分中值定理与导数的应用" /></p><h3 id="一元函数积分学"><a class="markdownIt-Anchor" href="#一元函数积分学"></a> 一元函数积分学</h3><p><img src="/img/kymath/gdsx/4%C2%B7%E4%B8%80%E5%85%83%E5%87%BD%E6%95%B0%E7%A7%AF%E5%88%86%E5%AD%A6.png" alt="4·一元函数积分学" /></p><h3 id="微分方程"><a class="markdownIt-Anchor" href="#微分方程"></a> 微分方程</h3><p><img src="/img/kymath/gdsx/5.%E5%BE%AE%E5%88%86%E6%96%B9%E7%A8%8B.png" alt="5.微分方程" /></p><h3 id="向量代数与空间解析几何"><a class="markdownIt-Anchor" href="#向量代数与空间解析几何"></a> 向量代数与空间解析几何</h3><p><img src="/img/kymath/gdsx/6.%E5%90%91%E9%87%8F%E4%BB%A3%E6%95%B0%E4%B8%8E%E7%A9%BA%E9%97%B4%E8%A7%A3%E6%9E%90%E5%87%A0%E4%BD%95.png" alt="6.向量代数与空间解析几何" /></p><h3 id="多元函数微分学及其应用"><a class="markdownIt-Anchor" href="#多元函数微分学及其应用"></a> 多元函数微分学及其应用</h3><p><img src="/img/kymath/gdsx/7.%E5%A4%9A%E5%85%83%E5%87%BD%E6%95%B0%E5%BE%AE%E5%88%86%E6%B3%95%E5%8F%8A%E5%85%B6%E5%BA%94%E7%94%A8.png" alt="7.多元函数微分法及其应用" /></p><h3 id="多元函数积分学"><a class="markdownIt-Anchor" href="#多元函数积分学"></a> 多元函数积分学</h3><p><img src="/img/kymath/gdsx/8.%E5%A4%9A%E5%85%83%E5%87%BD%E6%95%B0%E7%A7%AF%E5%88%86%E5%AD%A6.png" alt="8.多元函数积分学" /></p><h3 id="无穷级数"><a class="markdownIt-Anchor" href="#无穷级数"></a> 无穷级数</h3><p><img src="/img/kymath/gdsx/9.%E6%97%A0%E7%A9%B7%E7%BA%A7%E6%95%B0.png" alt="9.无穷级数" /></p><h3 id="高等数学总纲"><a class="markdownIt-Anchor" href="#高等数学总纲"></a> 高等数学总纲</h3><p><img src="/img/kymath/gdsx/%E9%AB%98%E7%AD%89%E6%95%B0%E5%AD%A6.png" alt="高等数学" /></p><h2 id="线性代数"><a class="markdownIt-Anchor" href="#线性代数"></a> 线性代数</h2><h3 id="行列式"><a class="markdownIt-Anchor" href="#行列式"></a> 行列式</h3><p><img src="/img/kymath/xxds/1.%E8%A1%8C%E5%88%97%E5%BC%8F.png" alt="1.行列式" /></p><h3 id="矩阵"><a class="markdownIt-Anchor" href="#矩阵"></a> 矩阵</h3><p><img src="/img/kymath/xxds/2.%E7%9F%A9%E9%98%B5.png" alt="2.矩阵" /></p><h3 id="向量组"><a class="markdownIt-Anchor" href="#向量组"></a> 向量组</h3><p><img src="/img/kymath/xxds/3.%E5%90%91%E9%87%8F%E7%BB%84.png" alt="3.向量组" /></p><h3 id="线性方程组"><a class="markdownIt-Anchor" href="#线性方程组"></a> 线性方程组</h3><p><img src="/img/kymath/xxds/4.%E7%BA%BF%E6%80%A7%E6%96%B9%E7%A8%8B%E7%BB%84.png" alt="4.线性方程组" /></p><h3 id="特征值与特征向量-相似及其对角化"><a class="markdownIt-Anchor" href="#特征值与特征向量-相似及其对角化"></a> 特征值与特征向量、相似及其对角化</h3><p><img src="/img/kymath/xxds/5.%E7%89%B9%E5%BE%81%E5%90%91%E9%87%8F%E4%B8%8E%E7%89%B9%E5%BE%81%E5%80%BC%EF%BC%8C%E7%9B%B8%E4%BC%BC%EF%BC%8C%E5%AF%B9%E8%A7%92%E5%8C%96.png" alt="5.特征向量与特征值，相似，对角化" /></p><h3 id="二次型"><a class="markdownIt-Anchor" href="#二次型"></a> 二次型</h3><p><img src="/img/kymath/xxds/6.%E4%BA%8C%E6%AC%A1%E5%9E%8B.png" alt="6.二次型" /></p><h3 id="线性代数总纲"><a class="markdownIt-Anchor" href="#线性代数总纲"></a> 线性代数总纲</h3><p><img src="/img/kymath/xxds/%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0.png" alt="线性代数" /></p><h2 id="概率论"><a class="markdownIt-Anchor" href="#概率论"></a> 概率论</h2><h3 id="随机事件与概率"><a class="markdownIt-Anchor" href="#随机事件与概率"></a> 随机事件与概率</h3><p><img src="/img/kymath/gl/1.png" alt="1" /></p><h3 id="一维随机变量及其分布"><a class="markdownIt-Anchor" href="#一维随机变量及其分布"></a> 一维随机变量及其分布</h3><p><img src="/img/kymath/gl/2.png" alt="2" /></p><h3 id="多维随机变量及其分布"><a class="markdownIt-Anchor" href="#多维随机变量及其分布"></a> 多维随机变量及其分布</h3><p><img src="/img/kymath/gl/3.png" alt="3" /></p><h3 id="数字特征"><a class="markdownIt-Anchor" href="#数字特征"></a> 数字特征</h3><p><img src="/img/kymath/gl/4.png" alt="4" /></p><h3 id="大数定律和中心极限定理"><a class="markdownIt-Anchor" href="#大数定律和中心极限定理"></a> 大数定律和中心极限定理</h3><p><img src="/img/kymath/gl/5.png" alt="5" /></p><h3 id="数理统计"><a class="markdownIt-Anchor" href="#数理统计"></a> 数理统计</h3><p><img src="/img/kymath/gl/6.png" alt="6" /></p><h2 id="其他待补充"><a class="markdownIt-Anchor" href="#其他待补充"></a> 其他待补充</h2>]]></content>
    
    
    <categories>
      
      <category>Math</category>
      
    </categories>
    
    
    <tags>
      
      <tag>高等数学</tag>
      
      <tag>线性代数</tag>
      
      <tag>概率论</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>python - pandas</title>
    <link href="/2021/02/14/python-pandas/"/>
    <url>/2021/02/14/python-pandas/</url>
    
    <content type="html"><![CDATA[<h1 id="pandas"><a class="markdownIt-Anchor" href="#pandas"></a> pandas</h1><a id="more"></a><blockquote><p><a href="https://pandas.pydata.org/docs/getting_started/index.html">pandas 文档主页</a></p></blockquote><blockquote><p><a href="https://pandas.pydata.org/docs/reference/index.html">pandas api文档</a></p></blockquote><p><strong>总结：多看看api文档比啥都强，全文完😄</strong></p><h2 id="开始"><a class="markdownIt-Anchor" href="#开始"></a> 开始</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<br></code></pre></td></tr></table></figure><h2 id="数据"><a class="markdownIt-Anchor" href="#数据"></a> 数据</h2><h3 id="读取数据"><a class="markdownIt-Anchor" href="#读取数据"></a> 读取数据</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">data = pd.read_csv( my_file.csv )<br>data = pd.read_csv( my_file.csv , sep= ; , encoding= latin-<span class="hljs-number">1</span> , nrows=<span class="hljs-number">1000</span>, skiprows=[<span class="hljs-number">2</span>,<span class="hljs-number">5</span>])<br></code></pre></td></tr></table></figure><p>说明：</p><ol><li>sep 代表的是分隔符。如果你在使用法语数据，excel 中 csv 分隔符是「;」，因此你需要显式地指定它。</li><li>编码设置为 latin-1 来读取法语字符。</li><li>nrows=1000 表示读取前 1000 行数据。</li><li>skiprows=[2,5] 表示你在读取文件的时候会移除第 2 行和第 5 行。</li></ol><p>其他</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">read_csv,read_excel,read_clipboard,read_sql<br></code></pre></td></tr></table></figure><h3 id="写入数据"><a class="markdownIt-Anchor" href="#写入数据"></a> 写入数据</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">data.to_csv( my_new_file.csv , index=<span class="hljs-literal">None</span>)<br></code></pre></td></tr></table></figure><p>index=None 表示将会以数据本来的样子写入。如果没有写 index=None，你会多出一个第一列，内容是 1，2，3，…</p><h3 id="更新数据"><a class="markdownIt-Anchor" href="#更新数据"></a> 更新数据</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">data.loc[<span class="hljs-number">8</span>,  column_1 ] =  english<span class="hljs-comment">#将第八行名为 column_1 的列替换为「english」</span><br>data.loc[data[ column_1 ]== french ,  column_1 ] =  French<span class="hljs-comment">#改变多列的值</span><br></code></pre></td></tr></table></figure><h3 id="检查数据"><a class="markdownIt-Anchor" href="#检查数据"></a> 检查数据</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">Gives (<span class="hljs-comment">#rows, #columns)#给出行数和列数</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">data.describe()<span class="hljs-comment">#计算基本的统计数据</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">data.head(<span class="hljs-number">3</span>)<span class="hljs-comment">#打印出数据的前 3 行。与之类似，.tail() 对应的是数据的最后一行。</span><br>data.loc[<span class="hljs-number">8</span>]<span class="hljs-comment">#打印出第八行</span><br>data.loc[<span class="hljs-number">8</span>,  column_1 ]<span class="hljs-comment">#打印第八行名为「column_1」的列</span><br>data.loc[<span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>,<span class="hljs-number">6</span>)]<span class="hljs-comment">#data.loc[range(4,6)]</span><br></code></pre></td></tr></table></figure><h2 id="pandas-函数"><a class="markdownIt-Anchor" href="#pandas-函数"></a> Pandas 函数</h2><h3 id="逻辑运算"><a class="markdownIt-Anchor" href="#逻辑运算"></a> 逻辑运算</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">data[data[ column_1 ]== french ]<br>data[(data[ column_1 ]== french ) &amp; (data[ year_born ]==<span class="hljs-number">1990</span>)]<br>data[(data[ column_1 ]== french ) &amp; (data[ year_born ]==<span class="hljs-number">1990</span>) &amp; ~(data[ city ]== London )]<br></code></pre></td></tr></table></figure><p>通过逻辑运算来取数据子集。要使用 &amp; (AND)、 ~ (NOT) 和 | (OR)，必须在逻辑运算前后加上「and」。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">data[data[ column_1 ].isin([ french ,  english ])]<br></code></pre></td></tr></table></figure><h3 id="绘图"><a class="markdownIt-Anchor" href="#绘图"></a> 绘图</h3><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs haskell"><span class="hljs-class"><span class="hljs-keyword">data</span>[ column_numerical ].plot()</span><br></code></pre></td></tr></table></figure><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs haskell"><span class="hljs-class"><span class="hljs-keyword">data</span>[ column_numerical ].hist()</span><br></code></pre></td></tr></table></figure><h3 id="其他函数"><a class="markdownIt-Anchor" href="#其他函数"></a> 其他函数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">data[ column_1 ].value_counts()<span class="hljs-comment">#统计出现的次数</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">data[ column_1 ].<span class="hljs-built_in">map</span>(<span class="hljs-built_in">len</span>)<br><br><span class="hljs-comment">#len() 函数被应用在了「column_1」列中的每一个元素上</span><br><span class="hljs-comment">#.map() 运算给一列中的每一个元素应用一个函数</span><br><span class="hljs-comment">#eg:</span><br>data[ column_1 ].<span class="hljs-built_in">map</span>(<span class="hljs-built_in">len</span>).<span class="hljs-built_in">map</span>(<span class="hljs-keyword">lambda</span> x: x/<span class="hljs-number">100</span>).plot()<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">data.apply(<span class="hljs-built_in">sum</span>)<br><span class="hljs-comment">#.apply() 会给一个列应用一个函数。</span><br><span class="hljs-comment">#.applymap() 会给表 (DataFrame) 中的所有单元应用一个函数。</span><br></code></pre></td></tr></table></figure><!--在处理大规模数据集时，pandas 会花费一些时间来进行. map()、.apply()、.applymap() 等操作。tqdm 是一个可以用来帮助预测这些操作的执行何时完成的包--><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> tqdm <span class="hljs-keyword">import</span> tqdm_notebook<br>tqdm_notebook().pandas()<br><span class="hljs-comment">#用 pandas 设置 tqdm</span><br>data[ column_1 ].progress_map(<span class="hljs-keyword">lambda</span> x: x.count( e ))<br><span class="hljs-comment">#.progress_map() 代替. map()、.apply() 和. applymap() 也是类似的。</span><br></code></pre></td></tr></table></figure><h3 id="sql关联"><a class="markdownIt-Anchor" href="#sql关联"></a> sql关联</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">data.merge(other_data, on=[ column_1 ,  column_2 ,  column_3 ])<br></code></pre></td></tr></table></figure><h3 id="分组"><a class="markdownIt-Anchor" href="#分组"></a> 分组</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">data.groupby( column_1 )[ column_2 ].apply(<span class="hljs-built_in">sum</span>).reset_index()<br><span class="hljs-comment">#按一个列分组，选择另一个列来执行一个函数。.reset_index() 会将数据重构成一个表。</span><br></code></pre></td></tr></table></figure><p><strong>行迭代</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">dictionary = &#123;&#125;<br><br><span class="hljs-keyword">for</span> i,row <span class="hljs-keyword">in</span> data.iterrows():<br> dictionary[row[ column_1 ]] = row[ column_2 ]<br></code></pre></td></tr></table></figure><p>.iterrows() 使用两个变量一起循环：行索引和行的数据 (上面的 i 和 row)</p><h2 id=""><a class="markdownIt-Anchor" href="#"></a> </h2>]]></content>
    
    
    <categories>
      
      <category>python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>pandas</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2021/01/01/hello-world/"/>
    <url>/2021/01/01/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="quick-start"><a class="markdownIt-Anchor" href="#quick-start"></a> Quick Start</h2><h3 id="create-a-new-post"><a class="markdownIt-Anchor" href="#create-a-new-post"></a> Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="run-server"><a class="markdownIt-Anchor" href="#run-server"></a> Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="generate-static-files"><a class="markdownIt-Anchor" href="#generate-static-files"></a> Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="deploy-to-remote-sites"><a class="markdownIt-Anchor" href="#deploy-to-remote-sites"></a> Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
